
HMI_Micro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00002e06  00002e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800134  00800134  00002f6e  2**0
                  ALLOC
  3 .stab         00002cac  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014dc  00000000  00000000  00005c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000070f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000adec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b079  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 07 	call	0xeae	; 0xeae <main>
      8a:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Start_Screen>:
 * Description:
 * this function display the first sentence on LCD " plz enter password"
 * and then move cursor to the next line at column zero.
 *
 */
void Start_Screen(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     b4e:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>

	LCD_displayString("Plz Enter Pass:");
     b52:	80 e6       	ldi	r24, 0x60	; 96
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

	LCD_moveCursor(1,0);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
}/*End of the function*/
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Re_Enter_Password_Screen>:
 * this function display the first sentence on LCD " Plz Re-Enter The "
 * and then move cursor to the next line at column zero to continue the sentence
 * and then take a password.
 *
 */
void Re_Enter_Password_Screen(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b70:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>

	LCD_displayString("Plz Re-Enter The ");
     b74:	80 e7       	ldi	r24, 0x70	; 112
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

	LCD_moveCursor(1,0);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>

	LCD_displayString("Same Pass:");
     b84:	82 e8       	ldi	r24, 0x82	; 130
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
}/*End of the function*/
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <Menu_Screen>:
 * Description:
 * this function display the menu after the user enter the correctly password
 * for opening the door or change password.
 *
 */
void Menu_Screen(void){
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62

	LCD_displayString("+ : Open Door");
     b9a:	8d e8       	ldi	r24, 0x8D	; 141
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
	LCD_moveCursor(1,0);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     baa:	8b e9       	ldi	r24, 0x9B	; 155
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

}/*End of the function*/
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <fill_array_of_password>:
 * was a delay for avoid faults in simulation, then the function not exit or ended
 * until the user enter equal button
 *
 *
 */
void fill_array_of_password(uint8 *arr){
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	6f 97       	sbiw	r28, 0x1f	; 31
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	9f 8f       	std	Y+31, r25	; 0x1f
     bd2:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8 i;
	for(i=0 ; i<5;i++){
     bd4:	1d 8e       	std	Y+29, r1	; 0x1d
     bd6:	05 c1       	rjmp	.+522    	; 0xde2 <fill_array_of_password+0x22a>
		arr[i] = KEYPAD_getPressedKey();
     bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
     be0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     be2:	8c 01       	movw	r16, r24
     be4:	02 0f       	add	r16, r18
     be6:	13 1f       	adc	r17, r19
     be8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <KEYPAD_getPressedKey>
     bec:	f8 01       	movw	r30, r16
     bee:	80 83       	st	Z, r24
		if(arr[i] >= 0 && arr[i] <= 9){
     bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bf8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bfa:	fc 01       	movw	r30, r24
     bfc:	e2 0f       	add	r30, r18
     bfe:	f3 1f       	adc	r31, r19
     c00:	80 81       	ld	r24, Z
     c02:	8a 30       	cpi	r24, 0x0A	; 10
     c04:	20 f4       	brcc	.+8      	; 0xc0e <fill_array_of_password+0x56>
			LCD_displayCharacter('*');
     c06:	8a e2       	ldi	r24, 0x2A	; 42
     c08:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_displayCharacter>
     c0c:	75 c0       	rjmp	.+234    	; 0xcf8 <fill_array_of_password+0x140>
		}else{
			i--;//to not full password only by numbers
     c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	8d 8f       	std	Y+29, r24	; 0x1d
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	a0 ea       	ldi	r26, 0xA0	; 160
     c1a:	b1 e4       	ldi	r27, 0x41	; 65
     c1c:	89 8f       	std	Y+25, r24	; 0x19
     c1e:	9a 8f       	std	Y+26, r25	; 0x1a
     c20:	ab 8f       	std	Y+27, r26	; 0x1b
     c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c24:	69 8d       	ldd	r22, Y+25	; 0x19
     c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a ef       	ldi	r20, 0xFA	; 250
     c32:	54 e4       	ldi	r21, 0x44	; 68
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8d 8b       	std	Y+21, r24	; 0x15
     c3e:	9e 8b       	std	Y+22, r25	; 0x16
     c40:	af 8b       	std	Y+23, r26	; 0x17
     c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c44:	6d 89       	ldd	r22, Y+21	; 0x15
     c46:	7e 89       	ldd	r23, Y+22	; 0x16
     c48:	8f 89       	ldd	r24, Y+23	; 0x17
     c4a:	98 8d       	ldd	r25, Y+24	; 0x18
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <fill_array_of_password+0xae>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9c 8b       	std	Y+20, r25	; 0x14
     c62:	8b 8b       	std	Y+19, r24	; 0x13
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <fill_array_of_password+0x12c>
	else if (__tmp > 65535)
     c66:	6d 89       	ldd	r22, Y+21	; 0x15
     c68:	7e 89       	ldd	r23, Y+22	; 0x16
     c6a:	8f 89       	ldd	r24, Y+23	; 0x17
     c6c:	98 8d       	ldd	r25, Y+24	; 0x18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	4f e7       	ldi	r20, 0x7F	; 127
     c74:	57 e4       	ldi	r21, 0x47	; 71
     c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	4c f5       	brge	.+82     	; 0xcd0 <fill_array_of_password+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7e:	69 8d       	ldd	r22, Y+25	; 0x19
     c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9c 8b       	std	Y+20, r25	; 0x14
     ca4:	8b 8b       	std	Y+19, r24	; 0x13
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <fill_array_of_password+0x10e>
     ca8:	88 ec       	ldi	r24, 0xC8	; 200
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 8b       	std	Y+18, r25	; 0x12
     cae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb0:	89 89       	ldd	r24, Y+17	; 0x11
     cb2:	9a 89       	ldd	r25, Y+18	; 0x12
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <fill_array_of_password+0xfc>
     cb8:	9a 8b       	std	Y+18, r25	; 0x12
     cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbc:	8b 89       	ldd	r24, Y+19	; 0x13
     cbe:	9c 89       	ldd	r25, Y+20	; 0x14
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9c 8b       	std	Y+20, r25	; 0x14
     cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	9c 89       	ldd	r25, Y+20	; 0x14
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	69 f7       	brne	.-38     	; 0xca8 <fill_array_of_password+0xf0>
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <fill_array_of_password+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd0:	6d 89       	ldd	r22, Y+21	; 0x15
     cd2:	7e 89       	ldd	r23, Y+22	; 0x16
     cd4:	8f 89       	ldd	r24, Y+23	; 0x17
     cd6:	98 8d       	ldd	r25, Y+24	; 0x18
     cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	8b 8b       	std	Y+19, r24	; 0x13
     ce4:	8b 89       	ldd	r24, Y+19	; 0x13
     ce6:	9c 89       	ldd	r25, Y+20	; 0x14
     ce8:	98 8b       	std	Y+16, r25	; 0x10
     cea:	8f 87       	std	Y+15, r24	; 0x0f
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	98 89       	ldd	r25, Y+16	; 0x10
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <fill_array_of_password+0x138>
     cf4:	98 8b       	std	Y+16, r25	; 0x10
     cf6:	8f 87       	std	Y+15, r24	; 0x0f
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	aa ef       	ldi	r26, 0xFA	; 250
     cfe:	b3 e4       	ldi	r27, 0x43	; 67
     d00:	8b 87       	std	Y+11, r24	; 0x0b
     d02:	9c 87       	std	Y+12, r25	; 0x0c
     d04:	ad 87       	std	Y+13, r26	; 0x0d
     d06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d08:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4a ef       	ldi	r20, 0xFA	; 250
     d16:	54 e4       	ldi	r21, 0x44	; 68
     d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	8f 83       	std	Y+7, r24	; 0x07
     d22:	98 87       	std	Y+8, r25	; 0x08
     d24:	a9 87       	std	Y+9, r26	; 0x09
     d26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d28:	6f 81       	ldd	r22, Y+7	; 0x07
     d2a:	78 85       	ldd	r23, Y+8	; 0x08
     d2c:	89 85       	ldd	r24, Y+9	; 0x09
     d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	2c f4       	brge	.+10     	; 0xd4a <fill_array_of_password+0x192>
		__ticks = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <fill_array_of_password+0x210>
	else if (__tmp > 65535)
     d4a:	6f 81       	ldd	r22, Y+7	; 0x07
     d4c:	78 85       	ldd	r23, Y+8	; 0x08
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	4c f5       	brge	.+82     	; 0xdb4 <fill_array_of_password+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d62:	6b 85       	ldd	r22, Y+11	; 0x0b
     d64:	7c 85       	ldd	r23, Y+12	; 0x0c
     d66:	8d 85       	ldd	r24, Y+13	; 0x0d
     d68:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e2       	ldi	r20, 0x20	; 32
     d70:	51 e4       	ldi	r21, 0x41	; 65
     d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <fill_array_of_password+0x1f2>
     d8c:	88 ec       	ldi	r24, 0xC8	; 200
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9c 83       	std	Y+4, r25	; 0x04
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <fill_array_of_password+0x1e0>
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	69 f7       	brne	.-38     	; 0xd8c <fill_array_of_password+0x1d4>
     db2:	14 c0       	rjmp	.+40     	; 0xddc <fill_array_of_password+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <fill_array_of_password+0x21c>
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
 *
 */
void fill_array_of_password(uint8 *arr){

	uint8 i;
	for(i=0 ; i<5;i++){
     ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	8d 8f       	std	Y+29, r24	; 0x1d
     de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de4:	85 30       	cpi	r24, 0x05	; 5
     de6:	08 f4       	brcc	.+2      	; 0xdea <fill_array_of_password+0x232>
     de8:	f7 ce       	rjmp	.-530    	; 0xbd8 <fill_array_of_password+0x20>
			i--;//to not full password only by numbers
			_delay_ms(20);
		}
		_delay_ms(500);
	}
	while(KEYPAD_getPressedKey() != 61);
     dea:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <KEYPAD_getPressedKey>
     dee:	8d 33       	cpi	r24, 0x3D	; 61
     df0:	e1 f7       	brne	.-8      	; 0xdea <fill_array_of_password+0x232>
}/*End of the function*/
     df2:	6f 96       	adiw	r28, 0x1f	; 31
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <uart_send_password>:
 * this function for make the code more easier or more readable that take the of
 * keys (password) that user entered from keypad and then send it to UART as array
 * of bytes.
 *
 */
void uart_send_password (uint8 *arr){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <uart_send_password+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9b 83       	std	Y+3, r25	; 0x03
     e16:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i =0; i<5; i++){
     e18:	19 82       	std	Y+1, r1	; 0x01
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <uart_send_password+0x30>
		UART_sendByte(arr[i]);
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	fc 01       	movw	r30, r24
     e28:	e2 0f       	add	r30, r18
     e2a:	f3 1f       	adc	r31, r19
     e2c:	80 81       	ld	r24, Z
     e2e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>
 * keys (password) that user entered from keypad and then send it to UART as array
 * of bytes.
 *
 */
void uart_send_password (uint8 *arr){
	for(uint8 i =0; i<5; i++){
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	78 f3       	brcs	.-34     	; 0xe1c <uart_send_password+0x14>
		UART_sendByte(arr[i]);
	}
}/*End of the function*/
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <uart_receive_password>:
 * store it in the array that given to it by address to keep it is element safe through
 * the program.
 *
 */

void uart_receive_password(uint8 *arr){
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <uart_receive_password+0xa>
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9b 83       	std	Y+3, r25	; 0x03
     e5c:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 j=0 ; j<5;j++){
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <uart_receive_password+0x36>
		arr[j] = UART_recieveByte();
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	8c 01       	movw	r16, r24
     e6e:	02 0f       	add	r16, r18
     e70:	13 1f       	adc	r17, r19
     e72:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
     e76:	f8 01       	movw	r30, r16
     e78:	80 83       	st	Z, r24
 * the program.
 *
 */

void uart_receive_password(uint8 *arr){
	for(uint8 j=0 ; j<5;j++){
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	70 f3       	brcs	.-36     	; 0xe62 <uart_receive_password+0x18>
		arr[j] = UART_recieveByte();
	}
}/*End of the function*/
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <lcd_un_locking_callback>:
 * interrupt happen the function will increase the number of ticks that means count ticks
 * until the program needed.
 *
 */

void lcd_un_locking_callback (void){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	/*tick used for LCD in ERROR case and when open the door*/
	timer_lcd_tick++;
     e9e:	80 91 34 01 	lds	r24, 0x0134
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 34 01 	sts	0x0134, r24
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <main>:

/*******************************************************************************
| 							Start of Main Function                              |
 *******************************************************************************/

int main(){
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	cb 54       	subi	r28, 0x4B	; 75
     eb8:	d0 40       	sbci	r29, 0x00	; 0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61

	/*For Enable the Global interrupt bit ( I - BIT)*/
	SREG |=(1<<7);
     ec4:	af e5       	ldi	r26, 0x5F	; 95
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e5       	ldi	r30, 0x5F	; 95
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
	/*
	 * this variable for store the choice that user need in it from keypad
	 * it take on of two cases ('+') or ('-') only.
	 *
	 */
	uint8 menu_key = 0;
     ed2:	18 a6       	std	Y+40, r1	; 0x28
	/*
	 * this variable as a flag set to one when the UAART receive the first password and
	 * send to device that it receive it.
	 *
	 */
	uint8 password_one_received = 0;
     ed4:	1f a2       	std	Y+39, r1	; 0x27
	/*
	 * this variable as a flag set to one when the UAART receive the first password and
	 * send to device that it receive it.
	 *
	 */
	uint8 password_two_received = 0;
     ed6:	1e a2       	std	Y+38, r1	; 0x26
	/*
	 * this variable as a flag set to one when the UAART receive the first password and
	 * second password then check equality of them and return the result.
	 *
	 */
	uint8 two_password_were_matched = NOT_MATCHED;
     ed8:	1d a2       	std	Y+37, r1	; 0x25
	/*
	 * This variable used for clearing the arrays to use in next operations.
	 */
	uint8 i_clear=0;
     eda:	1c a2       	std	Y+36, r1	; 0x24
	/*
	 * this variable used for store the response of UART about checking the two
	 * passwords and open the door if this password matched.
	 *
	 */
	uint8 password_for_door=0;
     edc:	1b a2       	std	Y+35, r1	; 0x23
	/*
	 * this variable used for checking on the old password that the user enter before
	 * changing the password or enter the new password
	 *
	 */
	uint8 check_pass_before_changed=0;
     ede:	1a a2       	std	Y+34, r1	; 0x22
	/*
	 * this variable for checking that the first array of keys (password) that
	 * user entered for first time was received
	 *
	 */
	uint8 check_new_pass_array1_received = 0;
     ee0:	19 a2       	std	Y+33, r1	; 0x21
	/*
	 * this variable for checking that the second array of keys (password) that
	 * user entered for second time was received
	 *
	 */
	uint8 check_new_pass_array2_received = 0;
     ee2:	18 a2       	std	Y+32, r1	; 0x20
	/*
	 * this variable used as flag for checking if the two passwords that were entered by
	 * the user before change password.
	 *
	 */
	uint8 check_equality_of_two_new_passwords = 0;
     ee4:	1f 8e       	std	Y+31, r1	; 0x1f
	 * this variable used for checking how many tries that user has to enter the password
	 * if user enter the password 3 times wrong it will implement the specific condition,
	 * it used when the user want to change password.
	 *
	 */
	uint8 number_of_tries_to_set_password = 3;
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	8e 8f       	std	Y+30, r24	; 0x1e
	 * this variable used for checking how many tries that user has to enter the password
	 * if user enter the password 3 times wrong it will implement the specific condition,
	 * it used when the user want to open the door.
	 *
	 */
	uint8 number_of_tries_to_open_the_door = 3;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	8d 8f       	std	Y+29, r24	; 0x1d
	 * 	2- Not using parity check bit.
	 *	3- Using 1 stop bit.
	 * 	4- Using Baud rate 9600.
	 *
	 */
	UART_ConfigType uart_config_HMI = {Frame_8_bit,Parity_Disable,Stop_1_bit,Buad_Rate_9600};
     eee:	9e 01       	movw	r18, r28
     ef0:	2d 5c       	subi	r18, 0xCD	; 205
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	24 96       	adiw	r28, 0x04	; 4
     ef6:	3f af       	std	Y+63, r19	; 0x3f
     ef8:	2e af       	std	Y+62, r18	; 0x3e
     efa:	24 97       	sbiw	r28, 0x04	; 4
     efc:	8c e2       	ldi	r24, 0x2C	; 44
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	26 96       	adiw	r28, 0x06	; 6
     f02:	9f af       	std	Y+63, r25	; 0x3f
     f04:	8e af       	std	Y+62, r24	; 0x3e
     f06:	26 97       	sbiw	r28, 0x06	; 6
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	27 96       	adiw	r28, 0x07	; 7
     f0c:	9f af       	std	Y+63, r25	; 0x3f
     f0e:	27 97       	sbiw	r28, 0x07	; 7
     f10:	26 96       	adiw	r28, 0x06	; 6
     f12:	ee ad       	ldd	r30, Y+62	; 0x3e
     f14:	ff ad       	ldd	r31, Y+63	; 0x3f
     f16:	26 97       	sbiw	r28, 0x06	; 6
     f18:	00 80       	ld	r0, Z
     f1a:	26 96       	adiw	r28, 0x06	; 6
     f1c:	2e ad       	ldd	r18, Y+62	; 0x3e
     f1e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f20:	26 97       	sbiw	r28, 0x06	; 6
     f22:	2f 5f       	subi	r18, 0xFF	; 255
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	3f af       	std	Y+63, r19	; 0x3f
     f2a:	2e af       	std	Y+62, r18	; 0x3e
     f2c:	26 97       	sbiw	r28, 0x06	; 6
     f2e:	24 96       	adiw	r28, 0x04	; 4
     f30:	ee ad       	ldd	r30, Y+62	; 0x3e
     f32:	ff ad       	ldd	r31, Y+63	; 0x3f
     f34:	24 97       	sbiw	r28, 0x04	; 4
     f36:	00 82       	st	Z, r0
     f38:	24 96       	adiw	r28, 0x04	; 4
     f3a:	2e ad       	ldd	r18, Y+62	; 0x3e
     f3c:	3f ad       	ldd	r19, Y+63	; 0x3f
     f3e:	24 97       	sbiw	r28, 0x04	; 4
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	24 96       	adiw	r28, 0x04	; 4
     f46:	3f af       	std	Y+63, r19	; 0x3f
     f48:	2e af       	std	Y+62, r18	; 0x3e
     f4a:	24 97       	sbiw	r28, 0x04	; 4
     f4c:	27 96       	adiw	r28, 0x07	; 7
     f4e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f50:	27 97       	sbiw	r28, 0x07	; 7
     f52:	31 50       	subi	r19, 0x01	; 1
     f54:	27 96       	adiw	r28, 0x07	; 7
     f56:	3f af       	std	Y+63, r19	; 0x3f
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	27 96       	adiw	r28, 0x07	; 7
     f5c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f5e:	27 97       	sbiw	r28, 0x07	; 7
     f60:	88 23       	and	r24, r24
     f62:	b1 f6       	brne	.-84     	; 0xf10 <main+0x62>
	 * 	3- using prescalar 1024.
	 * 	4- Using mode of the timer it will be : Compare Mode.
	 *
	 */

	Timer1_ConfigType timer_config_HMI = {0,31249,Prescalar_256,Compare_Mode};
     f64:	fe 01       	movw	r30, r28
     f66:	fa 96       	adiw	r30, 0x3a	; 58
     f68:	29 96       	adiw	r28, 0x09	; 9
     f6a:	ff af       	std	Y+63, r31	; 0x3f
     f6c:	ee af       	std	Y+62, r30	; 0x3e
     f6e:	29 97       	sbiw	r28, 0x09	; 9
     f70:	26 e2       	ldi	r18, 0x26	; 38
     f72:	31 e0       	ldi	r19, 0x01	; 1
     f74:	2b 96       	adiw	r28, 0x0b	; 11
     f76:	3f af       	std	Y+63, r19	; 0x3f
     f78:	2e af       	std	Y+62, r18	; 0x3e
     f7a:	2b 97       	sbiw	r28, 0x0b	; 11
     f7c:	36 e0       	ldi	r19, 0x06	; 6
     f7e:	2c 96       	adiw	r28, 0x0c	; 12
     f80:	3f af       	std	Y+63, r19	; 0x3f
     f82:	2c 97       	sbiw	r28, 0x0c	; 12
     f84:	2b 96       	adiw	r28, 0x0b	; 11
     f86:	ee ad       	ldd	r30, Y+62	; 0x3e
     f88:	ff ad       	ldd	r31, Y+63	; 0x3f
     f8a:	2b 97       	sbiw	r28, 0x0b	; 11
     f8c:	00 80       	ld	r0, Z
     f8e:	2b 96       	adiw	r28, 0x0b	; 11
     f90:	2e ad       	ldd	r18, Y+62	; 0x3e
     f92:	3f ad       	ldd	r19, Y+63	; 0x3f
     f94:	2b 97       	sbiw	r28, 0x0b	; 11
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	2b 96       	adiw	r28, 0x0b	; 11
     f9c:	3f af       	std	Y+63, r19	; 0x3f
     f9e:	2e af       	std	Y+62, r18	; 0x3e
     fa0:	2b 97       	sbiw	r28, 0x0b	; 11
     fa2:	29 96       	adiw	r28, 0x09	; 9
     fa4:	ee ad       	ldd	r30, Y+62	; 0x3e
     fa6:	ff ad       	ldd	r31, Y+63	; 0x3f
     fa8:	29 97       	sbiw	r28, 0x09	; 9
     faa:	00 82       	st	Z, r0
     fac:	29 96       	adiw	r28, 0x09	; 9
     fae:	2e ad       	ldd	r18, Y+62	; 0x3e
     fb0:	3f ad       	ldd	r19, Y+63	; 0x3f
     fb2:	29 97       	sbiw	r28, 0x09	; 9
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	29 96       	adiw	r28, 0x09	; 9
     fba:	3f af       	std	Y+63, r19	; 0x3f
     fbc:	2e af       	std	Y+62, r18	; 0x3e
     fbe:	29 97       	sbiw	r28, 0x09	; 9
     fc0:	2c 96       	adiw	r28, 0x0c	; 12
     fc2:	3f ad       	ldd	r19, Y+63	; 0x3f
     fc4:	2c 97       	sbiw	r28, 0x0c	; 12
     fc6:	31 50       	subi	r19, 0x01	; 1
     fc8:	2c 96       	adiw	r28, 0x0c	; 12
     fca:	3f af       	std	Y+63, r19	; 0x3f
     fcc:	2c 97       	sbiw	r28, 0x0c	; 12
     fce:	2c 96       	adiw	r28, 0x0c	; 12
     fd0:	8f ad       	ldd	r24, Y+63	; 0x3f
     fd2:	2c 97       	sbiw	r28, 0x0c	; 12
     fd4:	88 23       	and	r24, r24
     fd6:	b1 f6       	brne	.-84     	; 0xf84 <main+0xd6>
	/*******************************************************************************
	 | 							Initialization Functions                           |
	 *******************************************************************************/

	/* this function prepare the UART to work with the uart_config_HMI inputs*/
	UART_init(&uart_config_HMI);
     fd8:	ce 01       	movw	r24, r28
     fda:	c3 96       	adiw	r24, 0x33	; 51
     fdc:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <UART_init>

	/*this function for initialize the LCD before using to*/
	LCD_init();
     fe0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_init>
     fe4:	2c c0       	rjmp	.+88     	; 0x103e <main+0x190>
		 * the loop check the flag modified from UART if the two passwords were matched
		 * or not, if matched move to next step or enter the system.
		 */
		while(two_password_were_matched == NOT_MATCHED){ /*start of while check two passwords*/

			Start_Screen();/*print the first sentence*/
     fe6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Start_Screen>

			fill_array_of_password(password_arr);/*send first array*/
     fea:	87 e3       	ldi	r24, 0x37	; 55
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

			UART_sendByte(PASSWORD_ONE_IS_RESIVED_Q);/*tell UART that you want to send to it*/
     ff2:	8f e4       	ldi	r24, 0x4F	; 79
     ff4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

			uart_send_password(password_arr); /*then send to next device the password by UART*/
     ff8:	87 e3       	ldi	r24, 0x37	; 55
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

			password_one_received = UART_recieveByte();/*Flag to receive the response of UART*/
    1000:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    1004:	8f a3       	std	Y+39, r24	; 0x27

			while(password_one_received == 0){}/*Wait until UART modify the flag to move to next step*/
    1006:	8f a1       	ldd	r24, Y+39	; 0x27
    1008:	88 23       	and	r24, r24
    100a:	e9 f3       	breq	.-6      	; 0x1006 <main+0x158>


			Re_Enter_Password_Screen();/*display it to print the next password*/
    100c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Re_Enter_Password_Screen>

			fill_array_of_password(re_enterd_password_arr);/*send second array*/
    1010:	8c e3       	ldi	r24, 0x3C	; 60
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

			UART_sendByte(PASSWORD_TWO_IS_RESIVED_Q);/*tell UART that you want to send to it*/
    1018:	84 e5       	ldi	r24, 0x54	; 84
    101a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

			uart_send_password(re_enterd_password_arr);/*then send to next device the password by UART*/
    101e:	8c e3       	ldi	r24, 0x3C	; 60
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

			password_two_received = UART_recieveByte();/*Flag to receive the response of UART*/
    1026:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    102a:	8e a3       	std	Y+38, r24	; 0x26

			while(password_two_received == 0){}/*Wait until UART modify the flag to move to next step*/
    102c:	8e a1       	ldd	r24, Y+38	; 0x26
    102e:	88 23       	and	r24, r24
    1030:	e9 f3       	breq	.-6      	; 0x102c <main+0x17e>



			UART_sendByte(ASK_UART_ABOUT_MATCHING_PASSWORDS);/*tell the next device that you want to check equality of two passwords*/
    1032:	81 e4       	ldi	r24, 0x41	; 65
    1034:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>
			two_password_were_matched = UART_recieveByte();/*flag for receiving response of UART about equality and check on this flag for move to next step*/
    1038:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    103c:	8d a3       	std	Y+37, r24	; 0x25

		/*
		 * the loop check the flag modified from UART if the two passwords were matched
		 * or not, if matched move to next step or enter the system.
		 */
		while(two_password_were_matched == NOT_MATCHED){ /*start of while check two passwords*/
    103e:	8d a1       	ldd	r24, Y+37	; 0x25
    1040:	88 23       	and	r24, r24
    1042:	89 f2       	breq	.-94     	; 0xfe6 <main+0x138>
			two_password_were_matched = UART_recieveByte();/*flag for receiving response of UART about equality and check on this flag for move to next step*/

		}/*End of while check two passwords*/

		/*this loop for clearing the temporary arrays for use it in many next operation*/
		for(i_clear=0;i_clear<5;i_clear++){
    1044:	1c a2       	std	Y+36, r1	; 0x24
    1046:	11 c0       	rjmp	.+34     	; 0x106a <main+0x1bc>
			password_arr[i_clear]=0;
    1048:	8c a1       	ldd	r24, Y+36	; 0x24
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	fc 01       	movw	r30, r24
    1050:	e9 5c       	subi	r30, 0xC9	; 201
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	10 82       	st	Z, r1
			re_enterd_password_arr[i_clear]=0;
    1056:	8c a1       	ldd	r24, Y+36	; 0x24
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	e4 5c       	subi	r30, 0xC4	; 196
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	10 82       	st	Z, r1
			two_password_were_matched = UART_recieveByte();/*flag for receiving response of UART about equality and check on this flag for move to next step*/

		}/*End of while check two passwords*/

		/*this loop for clearing the temporary arrays for use it in many next operation*/
		for(i_clear=0;i_clear<5;i_clear++){
    1064:	8c a1       	ldd	r24, Y+36	; 0x24
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	8c a3       	std	Y+36, r24	; 0x24
    106a:	8c a1       	ldd	r24, Y+36	; 0x24
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	60 f3       	brcs	.-40     	; 0x1048 <main+0x19a>
			password_arr[i_clear]=0;
			re_enterd_password_arr[i_clear]=0;
		}

		LCD_clearScreen();/*if the two passwords are matched clear the screen to next step*/
    1070:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>

		Menu_Screen();/*enter to the system and print the menu*/
    1074:	0e 94 c9 05 	call	0xb92	; 0xb92 <Menu_Screen>

		menu_key = KEYPAD_getPressedKey();/*take choice from user*/
    1078:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <KEYPAD_getPressedKey>
    107c:	88 a7       	std	Y+40, r24	; 0x28

		switch(menu_key){ /*check which button user entered*/
    107e:	88 a5       	ldd	r24, Y+40	; 0x28
    1080:	e8 2f       	mov	r30, r24
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	22 96       	adiw	r28, 0x02	; 2
    1086:	ff af       	std	Y+63, r31	; 0x3f
    1088:	ee af       	std	Y+62, r30	; 0x3e
    108a:	22 97       	sbiw	r28, 0x02	; 2
    108c:	22 96       	adiw	r28, 0x02	; 2
    108e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1090:	3f ad       	ldd	r19, Y+63	; 0x3f
    1092:	22 97       	sbiw	r28, 0x02	; 2
    1094:	2b 32       	cpi	r18, 0x2B	; 43
    1096:	31 05       	cpc	r19, r1
    1098:	f9 f0       	breq	.+62     	; 0x10d8 <main+0x22a>
    109a:	22 96       	adiw	r28, 0x02	; 2
    109c:	8e ad       	ldd	r24, Y+62	; 0x3e
    109e:	9f ad       	ldd	r25, Y+63	; 0x3f
    10a0:	22 97       	sbiw	r28, 0x02	; 2
    10a2:	8d 32       	cpi	r24, 0x2D	; 45
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <main+0x1fc>
    10a8:	a1 c0       	rjmp	.+322    	; 0x11ec <main+0x33e>
    10aa:	c9 cf       	rjmp	.-110    	; 0x103e <main+0x190>

		case '+':

			while( password_for_door != PASS_FETCH_IS_CORRECT){/*check on this flag if set, exit it */

				Start_Screen(); /*ask the user for enter password*/
    10ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Start_Screen>

				fill_array_of_password(re_enterd_password_arr);/*receive password from user*/
    10b0:	8c e3       	ldi	r24, 0x3C	; 60
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

				UART_sendByte(SENDED_DATA_MATCHES_EEPROM);/*tell the another device that you want to send*/
    10b8:	84 e4       	ldi	r24, 0x44	; 68
    10ba:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

				uart_send_password(re_enterd_password_arr);/*send the password*/
    10be:	8c e3       	ldi	r24, 0x3C	; 60
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

				password_for_door = UART_recieveByte(); /*check about flag if set or not */
    10c6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    10ca:	8b a3       	std	Y+35, r24	; 0x23
				 * this check if the user enter wrong password in the first time give him
				 * three tries again to enter password if the three tries ended break the
				 * loop and exit to implement the next code
				 */

				if(number_of_tries_to_open_the_door<=0){
    10cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ce:	88 23       	and	r24, r24
    10d0:	31 f0       	breq	.+12     	; 0x10de <main+0x230>
					break;
				}
				else{
					number_of_tries_to_open_the_door --;
    10d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	8d 8f       	std	Y+29, r24	; 0x1d

		switch(menu_key){ /*check which button user entered*/

		case '+':

			while( password_for_door != PASS_FETCH_IS_CORRECT){/*check on this flag if set, exit it */
    10d8:	8b a1       	ldd	r24, Y+35	; 0x23
    10da:	80 35       	cpi	r24, 0x50	; 80
    10dc:	39 f7       	brne	.-50     	; 0x10ac <main+0x1fe>
			 * 2- if the user exit the loop because the flag is set by another device through
			 *    UART the else condition will be implemented and the door will be  opened.
			 *
			 *
			 */
			if(number_of_tries_to_open_the_door <=0){
    10de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e0:	88 23       	and	r24, r24
    10e2:	29 f5       	brne	.+74     	; 0x112e <main+0x280>

				UART_sendByte(ATTENTION_MODE);/*tell another device to turn buzzer on*/
    10e4:	88 e5       	ldi	r24, 0x58	; 88
    10e6:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

				number_of_tries_to_open_the_door =3;/*return number of tries to 3 again for next operation*/
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	8d 8f       	std	Y+29, r24	; 0x1d

				Timer1_init(&timer_config_HMI);/* set the timer for count time*/
    10ee:	ce 01       	movw	r24, r28
    10f0:	ca 96       	adiw	r24, 0x3a	; 58
    10f2:	0e 94 bc 14 	call	0x2978	; 0x2978 <Timer1_init>

				LCD_clearScreen(); /*clear screen for displaying error message*/
    10f6:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>
    10fa:	10 c0       	rjmp	.+32     	; 0x111c <main+0x26e>

				while(timer_lcd_tick != 60){/*display for a minute*/

					LCD_moveCursor(0,4);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
					LCD_displayString("Error ..");
    1104:	8b ea       	ldi	r24, 0xAB	; 171
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
					LCD_moveCursor(1,3);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
					LCD_displayString("Warning -_-!");
    1114:	84 eb       	ldi	r24, 0xB4	; 180
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

				Timer1_init(&timer_config_HMI);/* set the timer for count time*/

				LCD_clearScreen(); /*clear screen for displaying error message*/

				while(timer_lcd_tick != 60){/*display for a minute*/
    111c:	80 91 34 01 	lds	r24, 0x0134
    1120:	8c 33       	cpi	r24, 0x3C	; 60
    1122:	61 f7       	brne	.-40     	; 0x10fc <main+0x24e>
					LCD_displayString("Error ..");
					LCD_moveCursor(1,3);
					LCD_displayString("Warning -_-!");

				}
				timer_lcd_tick =0; /*reset the ticks to zero for using timer in new count */
    1124:	10 92 34 01 	sts	0x0134, r1
				Timer1_deInit();/*stop the timer*/
    1128:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <Timer1_deInit>
    112c:	88 cf       	rjmp	.-240    	; 0x103e <main+0x190>


			}
			else{/*enter here if the loop ended by the flag*/

				password_for_door = 0;
    112e:	1b a2       	std	Y+35, r1	; 0x23

				number_of_tries_to_open_the_door =3;
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	8d 8f       	std	Y+29, r24	; 0x1d

				UART_sendByte(DOOR_IS_OPEN);/*tell the another device to open the door*/
    1134:	85 e4       	ldi	r24, 0x45	; 69
    1136:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

				Timer1_init(&timer_config_HMI);/*set timer for counting time*/
    113a:	ce 01       	movw	r24, r28
    113c:	ca 96       	adiw	r24, 0x3a	; 58
    113e:	0e 94 bc 14 	call	0x2978	; 0x2978 <Timer1_init>

				Timer1_setCallBack(lcd_un_locking_callback);/*call the function implemented when interrupt happened*/
    1142:	8b e4       	ldi	r24, 0x4B	; 75
    1144:	97 e0       	ldi	r25, 0x07	; 7
    1146:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Timer1_setCallBack>

				LCD_clearScreen();/*clear screen for display door state*/
    114a:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
				LCD_displayString("Unlocking ..");
    1156:	81 ec       	ldi	r24, 0xC1	; 193
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
				while( timer_lcd_tick != 15){}/*wait until 15 second finished*/
    115e:	80 91 34 01 	lds	r24, 0x0134
    1162:	8f 30       	cpi	r24, 0x0F	; 15
    1164:	e1 f7       	brne	.-8      	; 0x115e <main+0x2b0>
				timer_lcd_tick=0;/*reset the ticks to zero for using motor in more operations*/
    1166:	10 92 34 01 	sts	0x0134, r1
				//Timer1_deInit();/*stop timer*/

				LCD_clearScreen();/*clear screen for display door state*/
    116a:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>
				Timer1_init(&timer_config_HMI);/*set timer for counting time*/
    116e:	ce 01       	movw	r24, r28
    1170:	ca 96       	adiw	r24, 0x3a	; 58
    1172:	0e 94 bc 14 	call	0x2978	; 0x2978 <Timer1_init>
				LCD_moveCursor(0,0);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
				LCD_displayString("HOLDING ..");
    117e:	8e ec       	ldi	r24, 0xCE	; 206
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
				while( timer_lcd_tick != 3){}/*wait until 3 second finished*/
    1186:	80 91 34 01 	lds	r24, 0x0134
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	e1 f7       	brne	.-8      	; 0x1186 <main+0x2d8>
				timer_lcd_tick=0;/*reset the ticks to zero for using motor in more operations*/
    118e:	10 92 34 01 	sts	0x0134, r1
				//Timer1_deInit();/*reset the ticks to zero for using motor in more operations*/

				LCD_clearScreen();/*clear screen for display door state*/
    1192:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>
				Timer1_init(&timer_config_HMI);/*set timer for counting time*/
    1196:	ce 01       	movw	r24, r28
    1198:	ca 96       	adiw	r24, 0x3a	; 58
    119a:	0e 94 bc 14 	call	0x2978	; 0x2978 <Timer1_init>
				LCD_moveCursor(0,0);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
				LCD_displayString("Locking ..");
    11a6:	89 ed       	ldi	r24, 0xD9	; 217
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
				while( timer_lcd_tick != 15){}/*wait until 15 second finished*/
    11ae:	80 91 34 01 	lds	r24, 0x0134
    11b2:	8f 30       	cpi	r24, 0x0F	; 15
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <main+0x300>
				timer_lcd_tick=0;/*reset the ticks to zero for using motor in more operations*/
    11b6:	10 92 34 01 	sts	0x0134, r1

				Timer1_deInit();/*reset the ticks to zero for using motor in more operations*/
    11ba:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <Timer1_deInit>
    11be:	3f cf       	rjmp	.-386    	; 0x103e <main+0x190>
		case '-':


			while(check_pass_before_changed != CORRECT_PASSWORD){/*check flag for change password */

				Start_Screen();/*ask user for enter the password*/
    11c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Start_Screen>

				fill_array_of_password(password_arr);/*store the key input*/
    11c4:	87 e3       	ldi	r24, 0x37	; 55
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

				UART_sendByte(CHANGE_PASSWORD);/*prepare UART*/
    11cc:	83 e4       	ldi	r24, 0x43	; 67
    11ce:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

				uart_send_password(password_arr);/*send password to another device to compare it by old one entered before */
    11d2:	87 e3       	ldi	r24, 0x37	; 55
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

				check_pass_before_changed = UART_recieveByte();/*receive the flag state from another device*/
    11da:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    11de:	8a a3       	std	Y+34, r24	; 0x22
				/*
				 * this check if the user enter wrong password in the first time give him
				 * three tries again to enter password if the three tries ended break the
				 * loop and exit to implement the next code
				 */
				if(number_of_tries_to_set_password <=0){
    11e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e2:	88 23       	and	r24, r24
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <main+0x344>
					break;
				}
				else{
					number_of_tries_to_set_password --;
    11e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e8:	81 50       	subi	r24, 0x01	; 1
    11ea:	8e 8f       	std	Y+30, r24	; 0x1e
			break;

		case '-':


			while(check_pass_before_changed != CORRECT_PASSWORD){/*check flag for change password */
    11ec:	8a a1       	ldd	r24, Y+34	; 0x22
    11ee:	8b 34       	cpi	r24, 0x4B	; 75
    11f0:	39 f7       	brne	.-50     	; 0x11c0 <main+0x312>
			 * 2- if the user exit the loop because the flag is set by another device through
			 *    UART the else condition will be implemented and the user able to change the password.
			 *
			 */

			if(number_of_tries_to_set_password <=0){
    11f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f4:	88 23       	and	r24, r24
    11f6:	49 f5       	brne	.+82     	; 0x124a <main+0x39c>

				UART_sendByte(ATTENTION_MODE);/*send to another device to turn on the buzzer*/
    11f8:	88 e5       	ldi	r24, 0x58	; 88
    11fa:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

				number_of_tries_to_set_password =3;/*reset number to tries to 3 for next operation*/
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	8e 8f       	std	Y+30, r24	; 0x1e

				Timer1_init(&timer_config_HMI);/*set timer to start count*/
    1202:	ce 01       	movw	r24, r28
    1204:	ca 96       	adiw	r24, 0x3a	; 58
    1206:	0e 94 bc 14 	call	0x2978	; 0x2978 <Timer1_init>

				Timer1_setCallBack(lcd_un_locking_callback);/*call the function implemented when interrupt happened*/
    120a:	8b e4       	ldi	r24, 0x4B	; 75
    120c:	97 e0       	ldi	r25, 0x07	; 7
    120e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Timer1_setCallBack>

				LCD_clearScreen();/*clear screen for display specific sentence*/
    1212:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>
    1216:	10 c0       	rjmp	.+32     	; 0x1238 <main+0x38a>

				while(timer_lcd_tick != 60){/*wait a minute until return back to laast screen*/

					LCD_moveCursor(0,4);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	64 e0       	ldi	r22, 0x04	; 4
    121c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
					LCD_displayString("Error ..");
    1220:	8b ea       	ldi	r24, 0xAB	; 171
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
					LCD_moveCursor(1,3);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
					LCD_displayString("Warning -_-!");
    1230:	84 eb       	ldi	r24, 0xB4	; 180
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

				Timer1_setCallBack(lcd_un_locking_callback);/*call the function implemented when interrupt happened*/

				LCD_clearScreen();/*clear screen for display specific sentence*/

				while(timer_lcd_tick != 60){/*wait a minute until return back to laast screen*/
    1238:	80 91 34 01 	lds	r24, 0x0134
    123c:	8c 33       	cpi	r24, 0x3C	; 60
    123e:	61 f7       	brne	.-40     	; 0x1218 <main+0x36a>
					LCD_displayString("Error ..");
					LCD_moveCursor(1,3);
					LCD_displayString("Warning -_-!");

				}
				timer_lcd_tick =0;/*reset tick to zero for next counting*/
    1240:	10 92 34 01 	sts	0x0134, r1
				Timer1_deInit();/*stop timer*/
    1244:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <Timer1_deInit>
    1248:	fa ce       	rjmp	.-524    	; 0x103e <main+0x190>
			}
			else{/*this else will be implemented when the loop exit by flag*/

				check_pass_before_changed = 0;
    124a:	1a a2       	std	Y+34, r1	; 0x22

				number_of_tries_to_set_password =3;
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	8e 8f       	std	Y+30, r24	; 0x1e

				LCD_clearScreen();
    1250:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>

				LCD_moveCursor(0,1);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>

				LCD_displayString("You Can Change");
    125c:	84 ee       	ldi	r24, 0xE4	; 228
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

				LCD_moveCursor(1,2);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	62 e0       	ldi	r22, 0x02	; 2
    1268:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>

				LCD_displayString("Password Now");
    126c:	83 ef       	ldi	r24, 0xF3	; 243
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa ef       	ldi	r26, 0xFA	; 250
    127a:	b4 e4       	ldi	r27, 0x44	; 68
    127c:	89 8f       	std	Y+25, r24	; 0x19
    127e:	9a 8f       	std	Y+26, r25	; 0x1a
    1280:	ab 8f       	std	Y+27, r26	; 0x1b
    1282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	69 8d       	ldd	r22, Y+25	; 0x19
    1286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8d 8b       	std	Y+21, r24	; 0x15
    129e:	9e 8b       	std	Y+22, r25	; 0x16
    12a0:	af 8b       	std	Y+23, r26	; 0x17
    12a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a4:	6d 89       	ldd	r22, Y+21	; 0x15
    12a6:	7e 89       	ldd	r23, Y+22	; 0x16
    12a8:	8f 89       	ldd	r24, Y+23	; 0x17
    12aa:	98 8d       	ldd	r25, Y+24	; 0x18
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <main+0x418>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9c 8b       	std	Y+20, r25	; 0x14
    12c2:	8b 8b       	std	Y+19, r24	; 0x13
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <main+0x496>
	else if (__tmp > 65535)
    12c6:	6d 89       	ldd	r22, Y+21	; 0x15
    12c8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 8d       	ldd	r25, Y+24	; 0x18
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	69 8d       	ldd	r22, Y+25	; 0x19
    12e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9c 8b       	std	Y+20, r25	; 0x14
    1304:	8b 8b       	std	Y+19, r24	; 0x13
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <main+0x478>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9a 8b       	std	Y+18, r25	; 0x12
    130e:	89 8b       	std	Y+17, r24	; 0x11
    1310:	89 89       	ldd	r24, Y+17	; 0x11
    1312:	9a 89       	ldd	r25, Y+18	; 0x12
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <main+0x466>
    1318:	9a 8b       	std	Y+18, r25	; 0x12
    131a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8b 89       	ldd	r24, Y+19	; 0x13
    1328:	9c 89       	ldd	r25, Y+20	; 0x14
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <main+0x45a>
    132e:	41 c0       	rjmp	.+130    	; 0x13b2 <main+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	6d 89       	ldd	r22, Y+21	; 0x15
    1332:	7e 89       	ldd	r23, Y+22	; 0x16
    1334:	8f 89       	ldd	r24, Y+23	; 0x17
    1336:	98 8d       	ldd	r25, Y+24	; 0x18
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9c 8b       	std	Y+20, r25	; 0x14
    1342:	8b 8b       	std	Y+19, r24	; 0x13
    1344:	8b 89       	ldd	r24, Y+19	; 0x13
    1346:	9c 89       	ldd	r25, Y+20	; 0x14
    1348:	98 8b       	std	Y+16, r25	; 0x10
    134a:	8f 87       	std	Y+15, r24	; 0x0f
    134c:	8f 85       	ldd	r24, Y+15	; 0x0f
    134e:	98 89       	ldd	r25, Y+16	; 0x10
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x4a2>
    1354:	98 8b       	std	Y+16, r25	; 0x10
    1356:	8f 87       	std	Y+15, r24	; 0x0f
    1358:	2c c0       	rjmp	.+88     	; 0x13b2 <main+0x504>

				_delay_ms(2000);

				while(check_equality_of_two_new_passwords == NOT_MATCHED){/*check that two password are equal before change password*/

					Start_Screen();/*ask user to enter password*/
    135a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Start_Screen>

					fill_array_of_password(new_password_array1);/*store array of keys from user*/
    135e:	ce 01       	movw	r24, r28
    1360:	89 96       	adiw	r24, 0x29	; 41
    1362:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

					UART_sendByte(CHECK_FIRST_NEW_PASSWORD); /*tell another device that you want to sent*/
    1366:	89 e4       	ldi	r24, 0x49	; 73
    1368:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

					uart_send_password(new_password_array1);/*send first password*/
    136c:	ce 01       	movw	r24, r28
    136e:	89 96       	adiw	r24, 0x29	; 41
    1370:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

					check_new_pass_array1_received = UART_recieveByte();/*check if another device receive the first password*/
    1374:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    1378:	89 a3       	std	Y+33, r24	; 0x21

					while(check_new_pass_array1_received != 1){};/*wait until the control ECU receive the password and answer*/
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	e9 f7       	brne	.-6      	; 0x137a <main+0x4cc>


					Re_Enter_Password_Screen();/*till user to enter the password again*/
    1380:	0e 94 b4 05 	call	0xb68	; 0xb68 <Re_Enter_Password_Screen>

					fill_array_of_password(new_password_array2);/*send the second password again*/
    1384:	ce 01       	movw	r24, r28
    1386:	8e 96       	adiw	r24, 0x2e	; 46
    1388:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <fill_array_of_password>

					UART_sendByte(CHECK_SECONDE_NEW_PASSWORD);/*tell UART hat you want to send*/
    138c:	81 e5       	ldi	r24, 0x51	; 81
    138e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

					uart_send_password(new_password_array2);/*send password to user*/
    1392:	ce 01       	movw	r24, r28
    1394:	8e 96       	adiw	r24, 0x2e	; 46
    1396:	0e 94 04 07 	call	0xe08	; 0xe08 <uart_send_password>

					check_new_pass_array2_received = UART_recieveByte();/*check if another device receive the second password*/
    139a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    139e:	88 a3       	std	Y+32, r24	; 0x20

					while(check_new_pass_array2_received != 1){};/*wait until the control ECU receive the password and answer*/
    13a0:	88 a1       	ldd	r24, Y+32	; 0x20
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	e9 f7       	brne	.-6      	; 0x13a0 <main+0x4f2>


					UART_sendByte(CHECK_TWO_NEW_PASSWORD_ARE_EQUAL);/*tell another device to check equal of two passwords and store them in external EEPROM*/
    13a6:	86 e5       	ldi	r24, 0x56	; 86
    13a8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>

					check_equality_of_two_new_passwords = UART_recieveByte();/*check on this flag to exit loop or not if they were matched */
    13ac:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    13b0:	8f 8f       	std	Y+31, r24	; 0x1f

				LCD_displayString("Password Now");

				_delay_ms(2000);

				while(check_equality_of_two_new_passwords == NOT_MATCHED){/*check that two password are equal before change password*/
    13b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b4:	88 23       	and	r24, r24
    13b6:	89 f2       	breq	.-94     	; 0x135a <main+0x4ac>
					UART_sendByte(CHECK_TWO_NEW_PASSWORD_ARE_EQUAL);/*tell another device to check equal of two passwords and store them in external EEPROM*/

					check_equality_of_two_new_passwords = UART_recieveByte();/*check on this flag to exit loop or not if they were matched */

				}
				check_equality_of_two_new_passwords = 0;
    13b8:	1f 8e       	std	Y+31, r1	; 0x1f
				/*
				 * if the two new passwords are matched display on the screen that the
				 * password Successfully changed.
				 *
				 */
				LCD_clearScreen();
    13ba:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_clearScreen>

				LCD_moveCursor(0,0);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>

				LCD_displayString("Password Changed");
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>

				LCD_moveCursor(1,2);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>

				LCD_displayString("Successfully");
    13d6:	81 e1       	ldi	r24, 0x11	; 17
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	aa e7       	ldi	r26, 0x7A	; 122
    13e4:	b5 e4       	ldi	r27, 0x45	; 69
    13e6:	8b 87       	std	Y+11, r24	; 0x0b
    13e8:	9c 87       	std	Y+12, r25	; 0x0c
    13ea:	ad 87       	std	Y+13, r26	; 0x0d
    13ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8f 83       	std	Y+7, r24	; 0x07
    1408:	98 87       	std	Y+8, r25	; 0x08
    140a:	a9 87       	std	Y+9, r26	; 0x09
    140c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <main+0x582>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <main+0x600>
	else if (__tmp > 65535)
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <main+0x5ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <main+0x5e2>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <main+0x5d0>
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <main+0x5c4>
    1498:	d2 cd       	rjmp	.-1116   	; 0x103e <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <main+0x60c>
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	bd cd       	rjmp	.-1158   	; 0x103e <main+0x190>

000014c4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <GPIO_setupPinDirection+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_setupPinDirection+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
    14d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <GPIO_setupPinDirection+0x1c>
    14de:	d5 c0       	rjmp	.+426    	; 0x168a <GPIO_setupPinDirection+0x1c6>
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <GPIO_setupPinDirection+0x24>
    14e6:	d1 c0       	rjmp	.+418    	; 0x168a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GPIO_setupPinDirection+0x3a>
    14fc:	43 c0       	rjmp	.+134    	; 0x1584 <GPIO_setupPinDirection+0xc0>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <GPIO_setupPinDirection+0x4e>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	71 f0       	breq	.+28     	; 0x152c <GPIO_setupPinDirection+0x68>
    1510:	bc c0       	rjmp	.+376    	; 0x168a <GPIO_setupPinDirection+0x1c6>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <GPIO_setupPinDirection+0x5a>
    151c:	5f c0       	rjmp	.+190    	; 0x15dc <GPIO_setupPinDirection+0x118>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <GPIO_setupPinDirection+0x66>
    1528:	85 c0       	rjmp	.+266    	; 0x1634 <GPIO_setupPinDirection+0x170>
    152a:	af c0       	rjmp	.+350    	; 0x168a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	a1 f4       	brne	.+40     	; 0x155a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1532:	aa e3       	ldi	r26, 0x3A	; 58
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_setupPinDirection+0x8c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_setupPinDirection+0x88>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	98 c0       	rjmp	.+304    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    155a:	aa e3       	ldi	r26, 0x3A	; 58
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_setupPinDirection+0xb4>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_setupPinDirection+0xb0>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	83 c0       	rjmp	.+262    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    158a:	a7 e3       	ldi	r26, 0x37	; 55
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_setupPinDirection+0xe4>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_setupPinDirection+0xe0>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	6c c0       	rjmp	.+216    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15b2:	a7 e3       	ldi	r26, 0x37	; 55
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e7 e3       	ldi	r30, 0x37	; 55
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_setupPinDirection+0x10c>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_setupPinDirection+0x108>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	57 c0       	rjmp	.+174    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	a1 f4       	brne	.+40     	; 0x160a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15e2:	a4 e3       	ldi	r26, 0x34	; 52
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e3       	ldi	r30, 0x34	; 52
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_setupPinDirection+0x13c>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_setupPinDirection+0x138>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	40 c0       	rjmp	.+128    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    160a:	a4 e3       	ldi	r26, 0x34	; 52
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e4 e3       	ldi	r30, 0x34	; 52
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_setupPinDirection+0x164>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_setupPinDirection+0x160>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	2b c0       	rjmp	.+86     	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    163a:	a1 e3       	ldi	r26, 0x31	; 49
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e1 e3       	ldi	r30, 0x31	; 49
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_setupPinDirection+0x194>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_setupPinDirection+0x190>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	14 c0       	rjmp	.+40     	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1662:	a1 e3       	ldi	r26, 0x31	; 49
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e1 e3       	ldi	r30, 0x31	; 49
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_setupPinDirection+0x1bc>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_setupPinDirection+0x1b8>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_writePin+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_writePin+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	6a 83       	std	Y+2, r22	; 0x02
    16ac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 30       	cpi	r24, 0x08	; 8
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <GPIO_writePin+0x1c>
    16b4:	d5 c0       	rjmp	.+426    	; 0x1860 <GPIO_writePin+0x1c6>
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	08 f0       	brcs	.+2      	; 0x16be <GPIO_writePin+0x24>
    16bc:	d1 c0       	rjmp	.+418    	; 0x1860 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3d 83       	std	Y+5, r19	; 0x05
    16c6:	2c 83       	std	Y+4, r18	; 0x04
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <GPIO_writePin+0x3a>
    16d2:	43 c0       	rjmp	.+134    	; 0x175a <GPIO_writePin+0xc0>
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <GPIO_writePin+0x4e>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	71 f0       	breq	.+28     	; 0x1702 <GPIO_writePin+0x68>
    16e6:	bc c0       	rjmp	.+376    	; 0x1860 <GPIO_writePin+0x1c6>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <GPIO_writePin+0x5a>
    16f2:	5f c0       	rjmp	.+190    	; 0x17b2 <GPIO_writePin+0x118>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <GPIO_writePin+0x66>
    16fe:	85 c0       	rjmp	.+266    	; 0x180a <GPIO_writePin+0x170>
    1700:	af c0       	rjmp	.+350    	; 0x1860 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	a1 f4       	brne	.+40     	; 0x1730 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1708:	ab e3       	ldi	r26, 0x3B	; 59
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e3       	ldi	r30, 0x3B	; 59
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_writePin+0x8c>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_writePin+0x88>
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	98 c0       	rjmp	.+304    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_writePin+0xb4>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_writePin+0xb0>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	83 c0       	rjmp	.+262    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	a1 f4       	brne	.+40     	; 0x1788 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <GPIO_writePin+0xe4>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <GPIO_writePin+0xe0>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	6c c0       	rjmp	.+216    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1788:	a8 e3       	ldi	r26, 0x38	; 56
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e3       	ldi	r30, 0x38	; 56
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_writePin+0x10c>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_writePin+0x108>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	57 c0       	rjmp	.+174    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_writePin+0x13c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_writePin+0x138>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	40 c0       	rjmp	.+128    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17e0:	a5 e3       	ldi	r26, 0x35	; 53
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e3       	ldi	r30, 0x35	; 53
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_writePin+0x164>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_writePin+0x160>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	2b c0       	rjmp	.+86     	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_writePin+0x194>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_writePin+0x190>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1838:	a2 e3       	ldi	r26, 0x32	; 50
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_writePin+0x1bc>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_writePin+0x1b8>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <GPIO_readPin+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_readPin+0x8>
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1882:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	08 f0       	brcs	.+2      	; 0x188c <GPIO_readPin+0x1c>
    188a:	84 c0       	rjmp	.+264    	; 0x1994 <GPIO_readPin+0x124>
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	08 f0       	brcs	.+2      	; 0x1894 <GPIO_readPin+0x24>
    1892:	80 c0       	rjmp	.+256    	; 0x1994 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3d 83       	std	Y+5, r19	; 0x05
    189c:	2c 83       	std	Y+4, r18	; 0x04
    189e:	4c 81       	ldd	r20, Y+4	; 0x04
    18a0:	5d 81       	ldd	r21, Y+5	; 0x05
    18a2:	41 30       	cpi	r20, 0x01	; 1
    18a4:	51 05       	cpc	r21, r1
    18a6:	79 f1       	breq	.+94     	; 0x1906 <GPIO_readPin+0x96>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	91 05       	cpc	r25, r1
    18b0:	34 f4       	brge	.+12     	; 0x18be <GPIO_readPin+0x4e>
    18b2:	2c 81       	ldd	r18, Y+4	; 0x04
    18b4:	3d 81       	ldd	r19, Y+5	; 0x05
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <GPIO_readPin+0x66>
    18bc:	6b c0       	rjmp	.+214    	; 0x1994 <GPIO_readPin+0x124>
    18be:	4c 81       	ldd	r20, Y+4	; 0x04
    18c0:	5d 81       	ldd	r21, Y+5	; 0x05
    18c2:	42 30       	cpi	r20, 0x02	; 2
    18c4:	51 05       	cpc	r21, r1
    18c6:	b9 f1       	breq	.+110    	; 0x1936 <GPIO_readPin+0xc6>
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	83 30       	cpi	r24, 0x03	; 3
    18ce:	91 05       	cpc	r25, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <GPIO_readPin+0x64>
    18d2:	49 c0       	rjmp	.+146    	; 0x1966 <GPIO_readPin+0xf6>
    18d4:	5f c0       	rjmp	.+190    	; 0x1994 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18d6:	e9 e3       	ldi	r30, 0x39	; 57
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_readPin+0x7e>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_readPin+0x7a>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	88 23       	and	r24, r24
    18fa:	19 f0       	breq	.+6      	; 0x1902 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	49 c0       	rjmp	.+146    	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1902:	19 82       	std	Y+1, r1	; 0x01
    1904:	47 c0       	rjmp	.+142    	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1906:	e6 e3       	ldi	r30, 0x36	; 54
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_readPin+0xae>
    191a:	55 95       	asr	r21
    191c:	47 95       	ror	r20
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_readPin+0xaa>
    1922:	ca 01       	movw	r24, r20
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	90 70       	andi	r25, 0x00	; 0
    1928:	88 23       	and	r24, r24
    192a:	19 f0       	breq	.+6      	; 0x1932 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	31 c0       	rjmp	.+98     	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1932:	19 82       	std	Y+1, r1	; 0x01
    1934:	2f c0       	rjmp	.+94     	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1936:	e3 e3       	ldi	r30, 0x33	; 51
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_readPin+0xde>
    194a:	55 95       	asr	r21
    194c:	47 95       	ror	r20
    194e:	8a 95       	dec	r24
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_readPin+0xda>
    1952:	ca 01       	movw	r24, r20
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	90 70       	andi	r25, 0x00	; 0
    1958:	88 23       	and	r24, r24
    195a:	19 f0       	breq	.+6      	; 0x1962 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	19 c0       	rjmp	.+50     	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	17 c0       	rjmp	.+46     	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1966:	e0 e3       	ldi	r30, 0x30	; 48
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_readPin+0x10e>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_readPin+0x10a>
    1982:	ca 01       	movw	r24, r20
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	88 23       	and	r24, r24
    198a:	19 f0       	breq	.+6      	; 0x1992 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1992:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_setupPortDirection+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_setupPortDirection+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	90 f5       	brcc	.+100    	; 0x1a20 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3c 83       	std	Y+4, r19	; 0x04
    19c4:	2b 83       	std	Y+3, r18	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <GPIO_setupPortDirection+0x5e>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <GPIO_setupPortDirection+0x3e>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <GPIO_setupPortDirection+0x54>
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <GPIO_setupPortDirection+0x68>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_setupPortDirection+0x72>
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19fa:	ea e3       	ldi	r30, 0x3A	; 58
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a04:	e7 e3       	ldi	r30, 0x37	; 55
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a0e:	e4 e3       	ldi	r30, 0x34	; 52
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a18:	e1 e3       	ldi	r30, 0x31	; 49
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <GPIO_writePort+0x6>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_writePort+0x8>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	90 f5       	brcc	.+100    	; 0x1aa8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3c 83       	std	Y+4, r19	; 0x04
    1a4c:	2b 83       	std	Y+3, r18	; 0x03
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	d1 f0       	breq	.+52     	; 0x1a8c <GPIO_writePort+0x5e>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <GPIO_writePort+0x3e>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <GPIO_writePort+0x54>
    1a6a:	1e c0       	rjmp	.+60     	; 0x1aa8 <GPIO_writePort+0x7a>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	81 f0       	breq	.+32     	; 0x1a96 <GPIO_writePort+0x68>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	81 f0       	breq	.+32     	; 0x1aa0 <GPIO_writePort+0x72>
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a82:	eb e3       	ldi	r30, 0x3B	; 59
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a8c:	e8 e3       	ldi	r30, 0x38	; 56
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 83       	st	Z, r24
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a96:	e5 e3       	ldi	r30, 0x35	; 53
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aa0:	e2 e3       	ldi	r30, 0x32	; 50
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <GPIO_readPort+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_readPort+0x8>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ac4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	90 f5       	brcc	.+100    	; 0x1b30 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3c 83       	std	Y+4, r19	; 0x04
    1ad4:	2b 83       	std	Y+3, r18	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	d1 f0       	breq	.+52     	; 0x1b14 <GPIO_readPort+0x5e>
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <GPIO_readPort+0x3e>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <GPIO_readPort+0x54>
    1af2:	1e c0       	rjmp	.+60     	; 0x1b30 <GPIO_readPort+0x7a>
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <GPIO_readPort+0x68>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <GPIO_readPort+0x72>
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b0a:	e9 e3       	ldi	r30, 0x39	; 57
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	0e c0       	rjmp	.+28     	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b14:	e6 e3       	ldi	r30, 0x36	; 54
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b1e:	e3 e3       	ldi	r30, 0x33	; 51
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b28:	e0 e3       	ldi	r30, 0x30	; 48
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	60 97       	sbiw	r28, 0x10	; 16
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	63 e0       	ldi	r22, 0x03	; 3
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	65 e0       	ldi	r22, 0x05	; 5
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	66 e0       	ldi	r22, 0x06	; 6
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	67 e0       	ldi	r22, 0x07	; 7
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ba4:	1f 86       	std	Y+15, r1	; 0x0f
    1ba6:	ab c0       	rjmp	.+342    	; 0x1cfe <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bbc:	18 8a       	std	Y+16, r1	; 0x10
    1bbe:	22 c0       	rjmp	.+68     	; 0x1c04 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1bc0:	88 89       	ldd	r24, Y+16	; 0x10
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	9c 5f       	subi	r25, 0xFC	; 252
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	69 2f       	mov	r22, r25
    1bca:	0e 94 38 0c 	call	0x1870	; 0x1870 <GPIO_readPin>
    1bce:	88 23       	and	r24, r24
    1bd0:	b1 f4       	brne	.+44     	; 0x1bfe <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	98 2f       	mov	r25, r24
    1be2:	88 89       	ldd	r24, Y+16	; 0x10
    1be4:	89 0f       	add	r24, r25
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1bec:	60 96       	adiw	r28, 0x10	; 16
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bfe:	88 89       	ldd	r24, Y+16	; 0x10
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	88 8b       	std	Y+16, r24	; 0x10
    1c04:	88 89       	ldd	r24, Y+16	; 0x10
    1c06:	84 30       	cpi	r24, 0x04	; 4
    1c08:	d8 f2       	brcs	.-74     	; 0x1bc0 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 ea       	ldi	r26, 0xA0	; 160
    1c1a:	b0 e4       	ldi	r27, 0x40	; 64
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <KEYPAD_getPressedKey+0x186>
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <KEYPAD_getPressedKey+0x174>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <KEYPAD_getPressedKey+0x168>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <KEYPAD_getPressedKey+0x1b0>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	8f 5f       	subi	r24, 0xFF	; 255
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f
    1cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	08 f4       	brcc	.+2      	; 0x1d06 <KEYPAD_getPressedKey+0x1c6>
    1d04:	51 cf       	rjmp	.-350    	; 0x1ba8 <KEYPAD_getPressedKey+0x68>
    1d06:	4e cf       	rjmp	.-356    	; 0x1ba4 <KEYPAD_getPressedKey+0x64>

00001d08 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d16:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3c 83       	std	Y+4, r19	; 0x04
    1d20:	2b 83       	std	Y+3, r18	; 0x03
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	88 30       	cpi	r24, 0x08	; 8
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d2c:	70 c0       	rjmp	.+224    	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d30:	3c 81       	ldd	r19, Y+4	; 0x04
    1d32:	29 30       	cpi	r18, 0x09	; 9
    1d34:	31 05       	cpc	r19, r1
    1d36:	5c f5       	brge	.+86     	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d42:	59 c0       	rjmp	.+178    	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d44:	2b 81       	ldd	r18, Y+3	; 0x03
    1d46:	3c 81       	ldd	r19, Y+4	; 0x04
    1d48:	25 30       	cpi	r18, 0x05	; 5
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	9c f4       	brge	.+38     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	91 05       	cpc	r25, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d58:	48 c0       	rjmp	.+144    	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5e:	23 30       	cpi	r18, 0x03	; 3
    1d60:	31 05       	cpc	r19, r1
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d64:	45 c0       	rjmp	.+138    	; 0x1df0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d70:	39 c0       	rjmp	.+114    	; 0x1de4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d72:	67 c0       	rjmp	.+206    	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	26 30       	cpi	r18, 0x06	; 6
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d7e:	41 c0       	rjmp	.+130    	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	87 30       	cpi	r24, 0x07	; 7
    1d86:	91 05       	cpc	r25, r1
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d8a:	3e c0       	rjmp	.+124    	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d8c:	37 c0       	rjmp	.+110    	; 0x1dfc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	2c 30       	cpi	r18, 0x0C	; 12
    1d94:	31 05       	cpc	r19, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d98:	46 c0       	rjmp	.+140    	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	8d 30       	cpi	r24, 0x0D	; 13
    1da0:	91 05       	cpc	r25, r1
    1da2:	5c f4       	brge	.+22     	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	2a 30       	cpi	r18, 0x0A	; 10
    1daa:	31 05       	cpc	r19, r1
    1dac:	b1 f1       	breq	.+108    	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	8b 30       	cpi	r24, 0x0B	; 11
    1db4:	91 05       	cpc	r25, r1
    1db6:	a4 f5       	brge	.+104    	; 0x1e20 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1db8:	2d c0       	rjmp	.+90     	; 0x1e14 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	2e 30       	cpi	r18, 0x0E	; 14
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	b9 f1       	breq	.+110    	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	8e 30       	cpi	r24, 0x0E	; 14
    1dca:	91 05       	cpc	r25, r1
    1dcc:	7c f1       	brlt	.+94     	; 0x1e2c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	2f 30       	cpi	r18, 0x0F	; 15
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	79 f1       	breq	.+94     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	80 31       	cpi	r24, 0x10	; 16
    1dde:	91 05       	cpc	r25, r1
    1de0:	69 f1       	breq	.+90     	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1de2:	2f c0       	rjmp	.+94     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1de4:	87 e0       	ldi	r24, 0x07	; 7
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	2e c0       	rjmp	.+92     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dea:	88 e0       	ldi	r24, 0x08	; 8
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	2b c0       	rjmp	.+86     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1df0:	89 e0       	ldi	r24, 0x09	; 9
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	28 c0       	rjmp	.+80     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1df6:	85 e2       	ldi	r24, 0x25	; 37
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	25 c0       	rjmp	.+74     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	22 c0       	rjmp	.+68     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e02:	85 e0       	ldi	r24, 0x05	; 5
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	1f c0       	rjmp	.+62     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e08:	86 e0       	ldi	r24, 0x06	; 6
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	1c c0       	rjmp	.+56     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e0e:	8a e2       	ldi	r24, 0x2A	; 42
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	19 c0       	rjmp	.+50     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	16 c0       	rjmp	.+44     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	13 c0       	rjmp	.+38     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	10 c0       	rjmp	.+32     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e26:	8d e2       	ldi	r24, 0x2D	; 45
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e2c:	8d e0       	ldi	r24, 0x0D	; 13
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e32:	19 82       	std	Y+1, r1	; 0x01
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e36:	8d e3       	ldi	r24, 0x3D	; 61
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	05 c0       	rjmp	.+10     	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e3c:	8b e2       	ldi	r24, 0x2B	; 43
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 ea       	ldi	r26, 0xA0	; 160
    1e84:	b1 e4       	ldi	r27, 0x41	; 65
    1e86:	8b 87       	std	Y+11, r24	; 0x0b
    1e88:	9c 87       	std	Y+12, r25	; 0x0c
    1e8a:	ad 87       	std	Y+13, r26	; 0x0d
    1e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a ef       	ldi	r20, 0xFA	; 250
    1e9c:	54 e4       	ldi	r21, 0x44	; 68
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8f 83       	std	Y+7, r24	; 0x07
    1ea8:	98 87       	std	Y+8, r25	; 0x08
    1eaa:	a9 87       	std	Y+9, r26	; 0x09
    1eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <LCD_init+0x7a>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <LCD_init+0xda>
    1f12:	88 ec       	ldi	r24, 0xC8	; 200
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_init+0xc8>
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <LCD_init+0xbc>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_init+0x104>
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	6f ef       	ldi	r22, 0xFF	; 255
    1f66:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f6a:	88 e3       	ldi	r24, 0x38	; 56
    1f6c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f70:	8c e0       	ldi	r24, 0x0C	; 12
    1f72:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_sendCommand>
}
    1f7c:	2e 96       	adiw	r28, 0x0e	; 14
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	e9 97       	sbiw	r28, 0x39	; 57
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	8d ab       	std	Y+53, r24	; 0x35
    1fb8:	9e ab       	std	Y+54, r25	; 0x36
    1fba:	af ab       	std	Y+55, r26	; 0x37
    1fbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	89 ab       	std	Y+49, r24	; 0x31
    1fd8:	9a ab       	std	Y+50, r25	; 0x32
    1fda:	ab ab       	std	Y+51, r26	; 0x33
    1fdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fde:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_sendCommand+0x72>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2000:	69 a9       	ldd	r22, Y+49	; 0x31
    2002:	7a a9       	ldd	r23, Y+50	; 0x32
    2004:	8b a9       	ldd	r24, Y+51	; 0x33
    2006:	9c a9       	ldd	r25, Y+52	; 0x34
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6d a9       	ldd	r22, Y+53	; 0x35
    201a:	7e a9       	ldd	r23, Y+54	; 0x36
    201c:	8f a9       	ldd	r24, Y+55	; 0x37
    201e:	98 ad       	ldd	r25, Y+56	; 0x38
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	98 ab       	std	Y+48, r25	; 0x30
    203e:	8f a7       	std	Y+47, r24	; 0x2f
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_sendCommand+0xd2>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9e a7       	std	Y+46, r25	; 0x2e
    2048:	8d a7       	std	Y+45, r24	; 0x2d
    204a:	8d a5       	ldd	r24, Y+45	; 0x2d
    204c:	9e a5       	ldd	r25, Y+46	; 0x2e
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_sendCommand+0xc0>
    2052:	9e a7       	std	Y+46, r25	; 0x2e
    2054:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8f a5       	ldd	r24, Y+47	; 0x2f
    2058:	98 a9       	ldd	r25, Y+48	; 0x30
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	98 ab       	std	Y+48, r25	; 0x30
    205e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8f a5       	ldd	r24, Y+47	; 0x2f
    2062:	98 a9       	ldd	r25, Y+48	; 0x30
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_sendCommand+0xb4>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	69 a9       	ldd	r22, Y+49	; 0x31
    206c:	7a a9       	ldd	r23, Y+50	; 0x32
    206e:	8b a9       	ldd	r24, Y+51	; 0x33
    2070:	9c a9       	ldd	r25, Y+52	; 0x34
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	98 ab       	std	Y+48, r25	; 0x30
    207c:	8f a7       	std	Y+47, r24	; 0x2f
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	9c a7       	std	Y+44, r25	; 0x2c
    2084:	8b a7       	std	Y+43, r24	; 0x2b
    2086:	8b a5       	ldd	r24, Y+43	; 0x2b
    2088:	9c a5       	ldd	r25, Y+44	; 0x2c
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_sendCommand+0xfc>
    208e:	9c a7       	std	Y+44, r25	; 0x2c
    2090:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	8f a3       	std	Y+39, r24	; 0x27
    20a6:	98 a7       	std	Y+40, r25	; 0x28
    20a8:	a9 a7       	std	Y+41, r26	; 0x29
    20aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6f a1       	ldd	r22, Y+39	; 0x27
    20ae:	78 a5       	ldd	r23, Y+40	; 0x28
    20b0:	89 a5       	ldd	r24, Y+41	; 0x29
    20b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a ef       	ldi	r20, 0xFA	; 250
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8b a3       	std	Y+35, r24	; 0x23
    20c6:	9c a3       	std	Y+36, r25	; 0x24
    20c8:	ad a3       	std	Y+37, r26	; 0x25
    20ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20cc:	6b a1       	ldd	r22, Y+35	; 0x23
    20ce:	7c a1       	ldd	r23, Y+36	; 0x24
    20d0:	8d a1       	ldd	r24, Y+37	; 0x25
    20d2:	9e a1       	ldd	r25, Y+38	; 0x26
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_sendCommand+0x160>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6f a1       	ldd	r22, Y+39	; 0x27
    2108:	78 a5       	ldd	r23, Y+40	; 0x28
    210a:	89 a5       	ldd	r24, Y+41	; 0x29
    210c:	9a a5       	ldd	r25, Y+42	; 0x2a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_sendCommand+0x1c0>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	98 a3       	std	Y+32, r25	; 0x20
    2136:	8f 8f       	std	Y+31, r24	; 0x1f
    2138:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213a:	98 a1       	ldd	r25, Y+32	; 0x20
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_sendCommand+0x1ae>
    2140:	98 a3       	std	Y+32, r25	; 0x20
    2142:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_sendCommand+0x1a2>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	9e 8f       	std	Y+30, r25	; 0x1e
    2172:	8d 8f       	std	Y+29, r24	; 0x1d
    2174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_sendCommand+0x1ea>
    217c:	9e 8f       	std	Y+30, r25	; 0x1e
    217e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	69 ad       	ldd	r22, Y+57	; 0x39
    2184:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <GPIO_writePort>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e8       	ldi	r26, 0x80	; 128
    218e:	bf e3       	ldi	r27, 0x3F	; 63
    2190:	89 8f       	std	Y+25, r24	; 0x19
    2192:	9a 8f       	std	Y+26, r25	; 0x1a
    2194:	ab 8f       	std	Y+27, r26	; 0x1b
    2196:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8d 8b       	std	Y+21, r24	; 0x15
    21b2:	9e 8b       	std	Y+22, r25	; 0x16
    21b4:	af 8b       	std	Y+23, r26	; 0x17
    21b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_sendCommand+0x24c>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21da:	6d 89       	ldd	r22, Y+21	; 0x15
    21dc:	7e 89       	ldd	r23, Y+22	; 0x16
    21de:	8f 89       	ldd	r24, Y+23	; 0x17
    21e0:	98 8d       	ldd	r25, Y+24	; 0x18
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	69 8d       	ldd	r22, Y+25	; 0x19
    21f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_sendCommand+0x2ac>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
    2224:	89 89       	ldd	r24, Y+17	; 0x11
    2226:	9a 89       	ldd	r25, Y+18	; 0x12
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_sendCommand+0x29a>
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9c 8b       	std	Y+20, r25	; 0x14
    2238:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8b 89       	ldd	r24, Y+19	; 0x13
    223c:	9c 89       	ldd	r25, Y+20	; 0x14
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_sendCommand+0x28e>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	98 89       	ldd	r25, Y+16	; 0x10
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_sendCommand+0x2d6>
    2268:	98 8b       	std	Y+16, r25	; 0x10
    226a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	8b 87       	std	Y+11, r24	; 0x0b
    2280:	9c 87       	std	Y+12, r25	; 0x0c
    2282:	ad 87       	std	Y+13, r26	; 0x0d
    2284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8f 83       	std	Y+7, r24	; 0x07
    22a0:	98 87       	std	Y+8, r25	; 0x08
    22a2:	a9 87       	std	Y+9, r26	; 0x09
    22a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a6:	6f 81       	ldd	r22, Y+7	; 0x07
    22a8:	78 85       	ldd	r23, Y+8	; 0x08
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22c8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ca:	78 85       	ldd	r23, Y+8	; 0x08
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <LCD_sendCommand+0x39a>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_sendCommand+0x388>
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <LCD_sendCommand+0x37c>
    2330:	14 c0       	rjmp	.+40     	; 0x235a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6f 81       	ldd	r22, Y+7	; 0x07
    2334:	78 85       	ldd	r23, Y+8	; 0x08
    2336:	89 85       	ldd	r24, Y+9	; 0x09
    2338:	9a 85       	ldd	r25, Y+10	; 0x0a
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_sendCommand+0x3c4>
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    235a:	e9 96       	adiw	r28, 0x39	; 57
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	e9 97       	sbiw	r28, 0x39	; 57
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e8       	ldi	r26, 0x80	; 128
    2392:	bf e3       	ldi	r27, 0x3F	; 63
    2394:	8d ab       	std	Y+53, r24	; 0x35
    2396:	9e ab       	std	Y+54, r25	; 0x36
    2398:	af ab       	std	Y+55, r26	; 0x37
    239a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6d a9       	ldd	r22, Y+53	; 0x35
    239e:	7e a9       	ldd	r23, Y+54	; 0x36
    23a0:	8f a9       	ldd	r24, Y+55	; 0x37
    23a2:	98 ad       	ldd	r25, Y+56	; 0x38
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	89 ab       	std	Y+49, r24	; 0x31
    23b6:	9a ab       	std	Y+50, r25	; 0x32
    23b8:	ab ab       	std	Y+51, r26	; 0x33
    23ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_displayCharacter+0x72>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	98 ab       	std	Y+48, r25	; 0x30
    23da:	8f a7       	std	Y+47, r24	; 0x2f
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23de:	69 a9       	ldd	r22, Y+49	; 0x31
    23e0:	7a a9       	ldd	r23, Y+50	; 0x32
    23e2:	8b a9       	ldd	r24, Y+51	; 0x33
    23e4:	9c a9       	ldd	r25, Y+52	; 0x34
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6d a9       	ldd	r22, Y+53	; 0x35
    23f8:	7e a9       	ldd	r23, Y+54	; 0x36
    23fa:	8f a9       	ldd	r24, Y+55	; 0x37
    23fc:	98 ad       	ldd	r25, Y+56	; 0x38
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_displayCharacter+0xd2>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9e a7       	std	Y+46, r25	; 0x2e
    2426:	8d a7       	std	Y+45, r24	; 0x2d
    2428:	8d a5       	ldd	r24, Y+45	; 0x2d
    242a:	9e a5       	ldd	r25, Y+46	; 0x2e
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_displayCharacter+0xc0>
    2430:	9e a7       	std	Y+46, r25	; 0x2e
    2432:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	98 ab       	std	Y+48, r25	; 0x30
    243c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2440:	98 a9       	ldd	r25, Y+48	; 0x30
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_displayCharacter+0xb4>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	98 ab       	std	Y+48, r25	; 0x30
    245a:	8f a7       	std	Y+47, r24	; 0x2f
    245c:	8f a5       	ldd	r24, Y+47	; 0x2f
    245e:	98 a9       	ldd	r25, Y+48	; 0x30
    2460:	9c a7       	std	Y+44, r25	; 0x2c
    2462:	8b a7       	std	Y+43, r24	; 0x2b
    2464:	8b a5       	ldd	r24, Y+43	; 0x2b
    2466:	9c a5       	ldd	r25, Y+44	; 0x2c
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_displayCharacter+0xfc>
    246c:	9c a7       	std	Y+44, r25	; 0x2c
    246e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	8f a3       	std	Y+39, r24	; 0x27
    2484:	98 a7       	std	Y+40, r25	; 0x28
    2486:	a9 a7       	std	Y+41, r26	; 0x29
    2488:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6f a1       	ldd	r22, Y+39	; 0x27
    248c:	78 a5       	ldd	r23, Y+40	; 0x28
    248e:	89 a5       	ldd	r24, Y+41	; 0x29
    2490:	9a a5       	ldd	r25, Y+42	; 0x2a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8b a3       	std	Y+35, r24	; 0x23
    24a4:	9c a3       	std	Y+36, r25	; 0x24
    24a6:	ad a3       	std	Y+37, r26	; 0x25
    24a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24aa:	6b a1       	ldd	r22, Y+35	; 0x23
    24ac:	7c a1       	ldd	r23, Y+36	; 0x24
    24ae:	8d a1       	ldd	r24, Y+37	; 0x25
    24b0:	9e a1       	ldd	r25, Y+38	; 0x26
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_displayCharacter+0x160>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9a a3       	std	Y+34, r25	; 0x22
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24cc:	6b a1       	ldd	r22, Y+35	; 0x23
    24ce:	7c a1       	ldd	r23, Y+36	; 0x24
    24d0:	8d a1       	ldd	r24, Y+37	; 0x25
    24d2:	9e a1       	ldd	r25, Y+38	; 0x26
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6f a1       	ldd	r22, Y+39	; 0x27
    24e6:	78 a5       	ldd	r23, Y+40	; 0x28
    24e8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9a a3       	std	Y+34, r25	; 0x22
    250a:	89 a3       	std	Y+33, r24	; 0x21
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_displayCharacter+0x1c0>
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 a3       	std	Y+32, r25	; 0x20
    2514:	8f 8f       	std	Y+31, r24	; 0x1f
    2516:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2518:	98 a1       	ldd	r25, Y+32	; 0x20
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_displayCharacter+0x1ae>
    251e:	98 a3       	std	Y+32, r25	; 0x20
    2520:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	89 a1       	ldd	r24, Y+33	; 0x21
    2524:	9a a1       	ldd	r25, Y+34	; 0x22
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9a a3       	std	Y+34, r25	; 0x22
    252a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	89 a1       	ldd	r24, Y+33	; 0x21
    252e:	9a a1       	ldd	r25, Y+34	; 0x22
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_displayCharacter+0x1a2>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6b a1       	ldd	r22, Y+35	; 0x23
    2538:	7c a1       	ldd	r23, Y+36	; 0x24
    253a:	8d a1       	ldd	r24, Y+37	; 0x25
    253c:	9e a1       	ldd	r25, Y+38	; 0x26
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9a a3       	std	Y+34, r25	; 0x22
    2548:	89 a3       	std	Y+33, r24	; 0x21
    254a:	89 a1       	ldd	r24, Y+33	; 0x21
    254c:	9a a1       	ldd	r25, Y+34	; 0x22
    254e:	9e 8f       	std	Y+30, r25	; 0x1e
    2550:	8d 8f       	std	Y+29, r24	; 0x1d
    2552:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2554:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_displayCharacter+0x1ea>
    255a:	9e 8f       	std	Y+30, r25	; 0x1e
    255c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	69 ad       	ldd	r22, Y+57	; 0x39
    2562:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <GPIO_writePort>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e8       	ldi	r26, 0x80	; 128
    256c:	bf e3       	ldi	r27, 0x3F	; 63
    256e:	89 8f       	std	Y+25, r24	; 0x19
    2570:	9a 8f       	std	Y+26, r25	; 0x1a
    2572:	ab 8f       	std	Y+27, r26	; 0x1b
    2574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	69 8d       	ldd	r22, Y+25	; 0x19
    2578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8d 8b       	std	Y+21, r24	; 0x15
    2590:	9e 8b       	std	Y+22, r25	; 0x16
    2592:	af 8b       	std	Y+23, r26	; 0x17
    2594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    25b8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ba:	7e 89       	ldd	r23, Y+22	; 0x16
    25bc:	8f 89       	ldd	r24, Y+23	; 0x17
    25be:	98 8d       	ldd	r25, Y+24	; 0x18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	69 8d       	ldd	r22, Y+25	; 0x19
    25d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_displayCharacter+0x2ac>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9a 8b       	std	Y+18, r25	; 0x12
    2600:	89 8b       	std	Y+17, r24	; 0x11
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	9a 89       	ldd	r25, Y+18	; 0x12
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_displayCharacter+0x29a>
    260a:	9a 8b       	std	Y+18, r25	; 0x12
    260c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <LCD_displayCharacter+0x28e>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	98 8b       	std	Y+16, r25	; 0x10
    263c:	8f 87       	std	Y+15, r24	; 0x0f
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_displayCharacter+0x2d6>
    2646:	98 8b       	std	Y+16, r25	; 0x10
    2648:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e8       	ldi	r26, 0x80	; 128
    265a:	bf e3       	ldi	r27, 0x3F	; 63
    265c:	8b 87       	std	Y+11, r24	; 0x0b
    265e:	9c 87       	std	Y+12, r25	; 0x0c
    2660:	ad 87       	std	Y+13, r26	; 0x0d
    2662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2664:	6b 85       	ldd	r22, Y+11	; 0x0b
    2666:	7c 85       	ldd	r23, Y+12	; 0x0c
    2668:	8d 85       	ldd	r24, Y+13	; 0x0d
    266a:	9e 85       	ldd	r25, Y+14	; 0x0e
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a ef       	ldi	r20, 0xFA	; 250
    2672:	54 e4       	ldi	r21, 0x44	; 68
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	8f 83       	std	Y+7, r24	; 0x07
    267e:	98 87       	std	Y+8, r25	; 0x08
    2680:	a9 87       	std	Y+9, r26	; 0x09
    2682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	3f c0       	rjmp	.+126    	; 0x2724 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ba:	18 16       	cp	r1, r24
    26bc:	4c f5       	brge	.+82     	; 0x2710 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26be:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <LCD_displayCharacter+0x39a>
    26e8:	88 ec       	ldi	r24, 0xC8	; 200
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_displayCharacter+0x388>
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	69 f7       	brne	.-38     	; 0x26e8 <LCD_displayCharacter+0x37c>
    270e:	14 c0       	rjmp	.+40     	; 0x2738 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2710:	6f 81       	ldd	r22, Y+7	; 0x07
    2712:	78 85       	ldd	r23, Y+8	; 0x08
    2714:	89 85       	ldd	r24, Y+9	; 0x09
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x3c4>
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2738:	e9 96       	adiw	r28, 0x39	; 57
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <LCD_displayString+0x6>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	9b 83       	std	Y+3, r25	; 0x03
    2758:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    275a:	19 82       	std	Y+1, r1	; 0x01
    275c:	0e c0       	rjmp	.+28     	; 0x277a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	fc 01       	movw	r30, r24
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	80 81       	ld	r24, Z
    2770:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_displayCharacter>
		i++;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	8f 5f       	subi	r24, 0xFF	; 255
    2778:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	fc 01       	movw	r30, r24
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	80 81       	ld	r24, Z
    278c:	88 23       	and	r24, r24
    278e:	39 f7       	brne	.-50     	; 0x275e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_moveCursor+0x6>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <LCD_moveCursor+0x8>
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	8a 83       	std	Y+2, r24	; 0x02
    27ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	3d 83       	std	Y+5, r19	; 0x05
    27b6:	2c 83       	std	Y+4, r18	; 0x04
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	c1 f0       	breq	.+48     	; 0x27f2 <LCD_moveCursor+0x56>
    27c2:	2c 81       	ldd	r18, Y+4	; 0x04
    27c4:	3d 81       	ldd	r19, Y+5	; 0x05
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <LCD_moveCursor+0x3a>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	61 f0       	breq	.+24     	; 0x27ec <LCD_moveCursor+0x50>
    27d4:	19 c0       	rjmp	.+50     	; 0x2808 <LCD_moveCursor+0x6c>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	69 f0       	breq	.+26     	; 0x27fa <LCD_moveCursor+0x5e>
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	9d 81       	ldd	r25, Y+5	; 0x05
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	61 f0       	breq	.+24     	; 0x2802 <LCD_moveCursor+0x66>
    27ea:	0e c0       	rjmp	.+28     	; 0x2808 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	0b c0       	rjmp	.+22     	; 0x2808 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	80 5c       	subi	r24, 0xC0	; 192
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	07 c0       	rjmp	.+14     	; 0x2808 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	80 5f       	subi	r24, 0xF0	; 240
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	80 5b       	subi	r24, 0xB0	; 176
    2806:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	80 68       	ori	r24, 0x80	; 128
    280c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_sendCommand>
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	00 d0       	rcall	.+0      	; 0x2826 <LCD_displayStringRowColumn+0x6>
    2826:	00 d0       	rcall	.+0      	; 0x2828 <LCD_displayStringRowColumn+0x8>
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	6a 83       	std	Y+2, r22	; 0x02
    2830:	5c 83       	std	Y+4, r21	; 0x04
    2832:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	6a 81       	ldd	r22, Y+2	; 0x02
    2838:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	62 97       	sbiw	r28, 0x12	; 18
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	9a 8b       	std	Y+18, r25	; 0x12
    2868:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    286a:	89 89       	ldd	r24, Y+17	; 0x11
    286c:	9a 89       	ldd	r25, Y+18	; 0x12
    286e:	9e 01       	movw	r18, r28
    2870:	2f 5f       	subi	r18, 0xFF	; 255
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	b9 01       	movw	r22, r18
    2876:	4a e0       	ldi	r20, 0x0A	; 10
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <itoa>
   LCD_displayString(buff); /* Display the string */
    287e:	ce 01       	movw	r24, r28
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	0e 94 a5 13 	call	0x274a	; 0x274a <LCD_displayString>
}
    2886:	62 96       	adiw	r28, 0x12	; 18
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_sendCommand>
}
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <__vector_9>:
/*
 * This is the ISR of the normal mode when the overflow occur the interrupt will
 * happen and then will jump to this ISR in vector table to implement it
 *
 */
ISR (TIMER1_OVF_vect){
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	4f 93       	push	r20
    28bc:	5f 93       	push	r21
    28be:	6f 93       	push	r22
    28c0:	7f 93       	push	r23
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62

	if(ptr_callback != NULL_PTR){
    28d6:	80 91 35 01 	lds	r24, 0x0135
    28da:	90 91 36 01 	lds	r25, 0x0136
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	29 f0       	breq	.+10     	; 0x28ec <__vector_9+0x40>
		(*ptr_callback) ();
    28e2:	e0 91 35 01 	lds	r30, 0x0135
    28e6:	f0 91 36 01 	lds	r31, 0x0136
    28ea:	09 95       	icall
	}
}
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	ff 91       	pop	r31
    28f2:	ef 91       	pop	r30
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

00002912 <__vector_7>:
 * This is the ISR of the compare mode when the overflow occur the interrupt will
 * happen and then will jump to this ISR in vector table to implement it
 *
 */

ISR (TIMER1_COMPA_vect){
    2912:	1f 92       	push	r1
    2914:	0f 92       	push	r0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	0f 92       	push	r0
    291a:	11 24       	eor	r1, r1
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62

	if(ptr_callback != NULL_PTR){
    293c:	80 91 35 01 	lds	r24, 0x0135
    2940:	90 91 36 01 	lds	r25, 0x0136
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	29 f0       	breq	.+10     	; 0x2952 <__vector_7+0x40>
			(*ptr_callback) ();
    2948:	e0 91 35 01 	lds	r30, 0x0135
    294c:	f0 91 36 01 	lds	r31, 0x0136
    2950:	09 95       	icall
		}
}
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	ff 91       	pop	r31
    2958:	ef 91       	pop	r30
    295a:	bf 91       	pop	r27
    295c:	af 91       	pop	r26
    295e:	9f 91       	pop	r25
    2960:	8f 91       	pop	r24
    2962:	7f 91       	pop	r23
    2964:	6f 91       	pop	r22
    2966:	5f 91       	pop	r21
    2968:	4f 91       	pop	r20
    296a:	3f 91       	pop	r19
    296c:	2f 91       	pop	r18
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0
    2974:	1f 90       	pop	r1
    2976:	18 95       	reti

00002978 <Timer1_init>:
 * 3- check if the mode is compare then modify the timer1 for work in compare mode
 * 4- any thing else modify the timer1 in normal mode (overflow mode)
 *
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <Timer1_init+0x6>
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * First put the initial value of the timer in TCNT1 by the user zero or any
	 * value
	 *
	 */
	TCNT1 = Config_Ptr->initial_value;
    2986:	ac e4       	ldi	r26, 0x4C	; 76
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 93       	st	X, r25
    2996:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == Compare_Mode){
    2998:	e9 81       	ldd	r30, Y+1	; 0x01
    299a:	fa 81       	ldd	r31, Y+2	; 0x02
    299c:	85 81       	ldd	r24, Z+5	; 0x05
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	21 f5       	brne	.+72     	; 0x29ea <Timer1_init+0x72>

		// This pin set to 1 in any mode not PWM
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    29a2:	ef e4       	ldi	r30, 0x4F	; 79
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	8c e0       	ldi	r24, 0x0C	; 12
    29a8:	80 83       	st	Z, r24
		 *
		 * 2- Then modify the mode of the register to work in compare mode by choose
		 * 	   mode 4 from timer1 (in data sheet) so to put pin WGM12 take the compare
		 * 	   value mode from enum and shift it to left by 1.
		 */
		TCCR1B = ((Config_Ptr->prescaler)) | ((Config_Ptr->mode) << 1);
    29aa:	ae e4       	ldi	r26, 0x4E	; 78
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e9 81       	ldd	r30, Y+1	; 0x01
    29b0:	fa 81       	ldd	r31, Y+2	; 0x02
    29b2:	84 81       	ldd	r24, Z+4	; 0x04
    29b4:	28 2f       	mov	r18, r24
    29b6:	e9 81       	ldd	r30, Y+1	; 0x01
    29b8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ba:	85 81       	ldd	r24, Z+5	; 0x05
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	82 2b       	or	r24, r18
    29c6:	8c 93       	st	X, r24

		// Enable Output Compare A Match Interrupt
		TIMSK |= (1<<OCIE1A);
    29c8:	a9 e5       	ldi	r26, 0x59	; 89
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e9 e5       	ldi	r30, 0x59	; 89
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	80 61       	ori	r24, 0x10	; 16
    29d4:	8c 93       	st	X, r24

		/*
		 * put the compare value that need timer count to it.
		 *
		 */
		OCR1A = Config_Ptr->compare_value;
    29d6:	aa e4       	ldi	r26, 0x4A	; 74
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e9 81       	ldd	r30, Y+1	; 0x01
    29dc:	fa 81       	ldd	r31, Y+2	; 0x02
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	11 96       	adiw	r26, 0x01	; 1
    29e4:	9c 93       	st	X, r25
    29e6:	8e 93       	st	-X, r24
    29e8:	11 c0       	rjmp	.+34     	; 0x2a0c <Timer1_init+0x94>

	}
	else{

		// This pin set to 1 in any mode not PWM
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    29ea:	ef e4       	ldi	r30, 0x4F	; 79
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	8c e0       	ldi	r24, 0x0C	; 12
    29f0:	80 83       	st	Z, r24
		 *    this made by do AND operation for the value with 0x07 to take first
		 *    three bits in it is value.
		 *
		 * 3- for normal mode we do not need to enable any other bits in this register
		 */
		TCCR1B = ((Config_Ptr->prescaler));
    29f2:	ae e4       	ldi	r26, 0x4E	; 78
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e9 81       	ldd	r30, Y+1	; 0x01
    29f8:	fa 81       	ldd	r31, Y+2	; 0x02
    29fa:	84 81       	ldd	r24, Z+4	; 0x04
    29fc:	8c 93       	st	X, r24

		// Enable Overflow Interrupt
		TIMSK |= (1<<TOIE1);
    29fe:	a9 e5       	ldi	r26, 0x59	; 89
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e9 e5       	ldi	r30, 0x59	; 89
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	84 60       	ori	r24, 0x04	; 4
    2a0a:	8c 93       	st	X, r24
	}
}
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <Timer1_deInit>:
 *
 * this function for stop the timer1 and reset the value in TCNT1.
 *
 */

void Timer1_deInit(void){
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * put TCNT1 = 0 for reset the value in it and start again from 0 when initialized
	 */
	TCNT1  = 0;
    2a1e:	ec e4       	ldi	r30, 0x4C	; 76
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	11 82       	std	Z+1, r1	; 0x01
    2a24:	10 82       	st	Z, r1

	/*
	 * put TCCR1B = 0 for preventing the clock from the timer1 (No Clock)
	 */
	TCCR1B = 0;
    2a26:	ee e4       	ldi	r30, 0x4E	; 78
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	10 82       	st	Z, r1
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <Timer1_setCallBack>:
 *
 * this is the callback function will  called when interrupt happen by it is pointer
 *
 */

void Timer1_setCallBack(void(*a_ptr)(void)){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <Timer1_setCallBack+0x6>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01

	ptr_callback = a_ptr;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	90 93 36 01 	sts	0x0136, r25
    2a48:	80 93 35 01 	sts	0x0135, r24

}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <UART_init>:
 *  4- Modify the Baud Rate equation.
 *	5- setup the UBRRH and UBRRL values.
 *
 */

void UART_init(const UART_ConfigType *Config_Ptr){
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <UART_init+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <UART_init+0x8>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value=0;
    2a66:	1a 82       	std	Y+2, r1	; 0x02
    2a68:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<< U2X);
    2a6a:	eb e2       	ldi	r30, 0x2B	; 43
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a72:	ea e2       	ldi	r30, 0x2A	; 42
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	88 e1       	ldi	r24, 0x18	; 24
    2a78:	80 83       	st	Z, r24
	 * UCSRC will set to 1, but if the number of bits equal to 9 bits the 2 bits
	 * UCSZ0 and UCSZ1 in register UCSRC will set to 1 and the bit UCSZ2 in register
	 * UCSZ2 will set to 1 else, so this if important for configuration.
	 */

	if(Config_Ptr->bit_data == Frame_9_bit){
    2a7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7e:	80 81       	ld	r24, Z
    2a80:	87 30       	cpi	r24, 0x07	; 7
    2a82:	91 f5       	brne	.+100    	; 0x2ae8 <UART_init+0x92>

		UCSRC = (1<<URSEL) | ((Config_Ptr->parity & 0x03)<<4)
    2a84:	a0 e4       	ldi	r26, 0x40	; 64
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8c:	81 81       	ldd	r24, Z+1	; 0x01
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	83 70       	andi	r24, 0x03	; 3
    2a94:	90 70       	andi	r25, 0x00	; 0
    2a96:	82 95       	swap	r24
    2a98:	92 95       	swap	r25
    2a9a:	90 7f       	andi	r25, 0xF0	; 240
    2a9c:	98 27       	eor	r25, r24
    2a9e:	80 7f       	andi	r24, 0xF0	; 240
    2aa0:	98 27       	eor	r25, r24
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	20 68       	ori	r18, 0x80	; 128
    2aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	81 70       	andi	r24, 0x01	; 1
    2ab2:	90 70       	andi	r25, 0x00	; 0
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	28 2b       	or	r18, r24
    2ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac6:	80 81       	ld	r24, Z
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	83 70       	andi	r24, 0x03	; 3
    2ace:	90 70       	andi	r25, 0x00	; 0
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	82 2b       	or	r24, r18
    2ad6:	8c 93       	st	X, r24
					 | ((Config_Ptr->stop_bit & 0x01)<<3)
					 | ((Config_Ptr->bit_data & 0X03)<<1);

		UCSRB |= (1<< UCSZ2);
    2ad8:	aa e2       	ldi	r26, 0x2A	; 42
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	ea e2       	ldi	r30, 0x2A	; 42
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	84 60       	ori	r24, 0x04	; 4
    2ae4:	8c 93       	st	X, r24
    2ae6:	2a c0       	rjmp	.+84     	; 0x2b3c <UART_init+0xe6>

	}
	else{
		UCSRC = (1<<URSEL) | ((Config_Ptr->parity & 0x03)<<4)
    2ae8:	a0 e4       	ldi	r26, 0x40	; 64
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	eb 81       	ldd	r30, Y+3	; 0x03
    2aee:	fc 81       	ldd	r31, Y+4	; 0x04
    2af0:	81 81       	ldd	r24, Z+1	; 0x01
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	83 70       	andi	r24, 0x03	; 3
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	82 95       	swap	r24
    2afc:	92 95       	swap	r25
    2afe:	90 7f       	andi	r25, 0xF0	; 240
    2b00:	98 27       	eor	r25, r24
    2b02:	80 7f       	andi	r24, 0xF0	; 240
    2b04:	98 27       	eor	r25, r24
    2b06:	28 2f       	mov	r18, r24
    2b08:	20 68       	ori	r18, 0x80	; 128
    2b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	81 70       	andi	r24, 0x01	; 1
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	28 2b       	or	r18, r24
    2b26:	eb 81       	ldd	r30, Y+3	; 0x03
    2b28:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	83 70       	andi	r24, 0x03	; 3
    2b32:	90 70       	andi	r25, 0x00	; 0
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	82 2b       	or	r24, r18
    2b3a:	8c 93       	st	X, r24
							 | ((Config_Ptr->stop_bit & 0x01)<<3)
							 | ((Config_Ptr->bit_data & 0X03)<<1);
	}

	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	83 81       	ldd	r24, Z+3	; 0x03
    2b42:	94 81       	ldd	r25, Z+4	; 0x04
    2b44:	a5 81       	ldd	r26, Z+5	; 0x05
    2b46:	b6 81       	ldd	r27, Z+6	; 0x06
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	aa 1f       	adc	r26, r26
    2b4e:	bb 1f       	adc	r27, r27
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	aa 1f       	adc	r26, r26
    2b56:	bb 1f       	adc	r27, r27
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	aa 1f       	adc	r26, r26
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	9c 01       	movw	r18, r24
    2b62:	ad 01       	movw	r20, r26
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	92 e1       	ldi	r25, 0x12	; 18
    2b68:	aa e7       	ldi	r26, 0x7A	; 122
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__udivmodsi4>
    2b74:	da 01       	movw	r26, r20
    2b76:	c9 01       	movw	r24, r18
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value >>8;
    2b7e:	e0 e4       	ldi	r30, 0x40	; 64
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	89 2f       	mov	r24, r25
    2b88:	99 27       	eor	r25, r25
    2b8a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b8c:	e9 e2       	ldi	r30, 0x29	; 41
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	80 83       	st	Z, r24
}
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bae:	eb e2       	ldi	r30, 0x2B	; 43
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 2f       	mov	r24, r24
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	80 72       	andi	r24, 0x20	; 32
    2bba:	90 70       	andi	r25, 0x00	; 0
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	b9 f3       	breq	.-18     	; 0x2bae <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bc0:	ec e2       	ldi	r30, 0x2C	; 44
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bd8:	eb e2       	ldi	r30, 0x2B	; 43
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	88 23       	and	r24, r24
    2be0:	dc f7       	brge	.-10     	; 0x2bd8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2be2:	ec e2       	ldi	r30, 0x2C	; 44
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
}
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <UART_sendString+0x6>
    2bf4:	0f 92       	push	r0
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bfe:	19 82       	std	Y+1, r1	; 0x01
    2c00:	0e c0       	rjmp	.+28     	; 0x2c1e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e2 0f       	add	r30, r18
    2c10:	f3 1f       	adc	r31, r19
    2c12:	80 81       	ld	r24, Z
    2c14:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <UART_sendByte>
		i++;
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	9b 81       	ldd	r25, Y+3	; 0x03
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e2 0f       	add	r30, r18
    2c2c:	f3 1f       	adc	r31, r19
    2c2e:	80 81       	ld	r24, Z
    2c30:	88 23       	and	r24, r24
    2c32:	39 f7       	brne	.-50     	; 0x2c02 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <UART_receiveString+0xa>
    2c4a:	0f 92       	push	r0
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	9b 83       	std	Y+3, r25	; 0x03
    2c52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c54:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	8c 01       	movw	r16, r24
    2c62:	02 0f       	add	r16, r18
    2c64:	13 1f       	adc	r17, r19
    2c66:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	80 83       	st	Z, r24
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	8c 01       	movw	r16, r24
    2c82:	02 0f       	add	r16, r18
    2c84:	13 1f       	adc	r17, r19
    2c86:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <UART_recieveByte>
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e2 0f       	add	r30, r18
    2c9c:	f3 1f       	adc	r31, r19
    2c9e:	80 81       	ld	r24, Z
    2ca0:	83 32       	cpi	r24, 0x23	; 35
    2ca2:	31 f7       	brne	.-52     	; 0x2c70 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	9b 81       	ldd	r25, Y+3	; 0x03
    2cae:	fc 01       	movw	r30, r24
    2cb0:	e2 0f       	add	r30, r18
    2cb2:	f3 1f       	adc	r31, r19
    2cb4:	10 82       	st	Z, r1
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	08 95       	ret

00002cc6 <__udivmodsi4>:
    2cc6:	a1 e2       	ldi	r26, 0x21	; 33
    2cc8:	1a 2e       	mov	r1, r26
    2cca:	aa 1b       	sub	r26, r26
    2ccc:	bb 1b       	sub	r27, r27
    2cce:	fd 01       	movw	r30, r26
    2cd0:	0d c0       	rjmp	.+26     	; 0x2cec <__udivmodsi4_ep>

00002cd2 <__udivmodsi4_loop>:
    2cd2:	aa 1f       	adc	r26, r26
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	ee 1f       	adc	r30, r30
    2cd8:	ff 1f       	adc	r31, r31
    2cda:	a2 17       	cp	r26, r18
    2cdc:	b3 07       	cpc	r27, r19
    2cde:	e4 07       	cpc	r30, r20
    2ce0:	f5 07       	cpc	r31, r21
    2ce2:	20 f0       	brcs	.+8      	; 0x2cec <__udivmodsi4_ep>
    2ce4:	a2 1b       	sub	r26, r18
    2ce6:	b3 0b       	sbc	r27, r19
    2ce8:	e4 0b       	sbc	r30, r20
    2cea:	f5 0b       	sbc	r31, r21

00002cec <__udivmodsi4_ep>:
    2cec:	66 1f       	adc	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	1a 94       	dec	r1
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <__udivmodsi4_loop>
    2cf8:	60 95       	com	r22
    2cfa:	70 95       	com	r23
    2cfc:	80 95       	com	r24
    2cfe:	90 95       	com	r25
    2d00:	9b 01       	movw	r18, r22
    2d02:	ac 01       	movw	r20, r24
    2d04:	bd 01       	movw	r22, r26
    2d06:	cf 01       	movw	r24, r30
    2d08:	08 95       	ret

00002d0a <__prologue_saves__>:
    2d0a:	2f 92       	push	r2
    2d0c:	3f 92       	push	r3
    2d0e:	4f 92       	push	r4
    2d10:	5f 92       	push	r5
    2d12:	6f 92       	push	r6
    2d14:	7f 92       	push	r7
    2d16:	8f 92       	push	r8
    2d18:	9f 92       	push	r9
    2d1a:	af 92       	push	r10
    2d1c:	bf 92       	push	r11
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	ca 1b       	sub	r28, r26
    2d34:	db 0b       	sbc	r29, r27
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	09 94       	ijmp

00002d42 <__epilogue_restores__>:
    2d42:	2a 88       	ldd	r2, Y+18	; 0x12
    2d44:	39 88       	ldd	r3, Y+17	; 0x11
    2d46:	48 88       	ldd	r4, Y+16	; 0x10
    2d48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d54:	b9 84       	ldd	r11, Y+9	; 0x09
    2d56:	c8 84       	ldd	r12, Y+8	; 0x08
    2d58:	df 80       	ldd	r13, Y+7	; 0x07
    2d5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d60:	1b 81       	ldd	r17, Y+3	; 0x03
    2d62:	aa 81       	ldd	r26, Y+2	; 0x02
    2d64:	b9 81       	ldd	r27, Y+1	; 0x01
    2d66:	ce 0f       	add	r28, r30
    2d68:	d1 1d       	adc	r29, r1
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	ed 01       	movw	r28, r26
    2d76:	08 95       	ret

00002d78 <itoa>:
    2d78:	fb 01       	movw	r30, r22
    2d7a:	9f 01       	movw	r18, r30
    2d7c:	e8 94       	clt
    2d7e:	42 30       	cpi	r20, 0x02	; 2
    2d80:	c4 f0       	brlt	.+48     	; 0x2db2 <itoa+0x3a>
    2d82:	45 32       	cpi	r20, 0x25	; 37
    2d84:	b4 f4       	brge	.+44     	; 0x2db2 <itoa+0x3a>
    2d86:	4a 30       	cpi	r20, 0x0A	; 10
    2d88:	29 f4       	brne	.+10     	; 0x2d94 <itoa+0x1c>
    2d8a:	97 fb       	bst	r25, 7
    2d8c:	1e f4       	brtc	.+6      	; 0x2d94 <itoa+0x1c>
    2d8e:	90 95       	com	r25
    2d90:	81 95       	neg	r24
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	64 2f       	mov	r22, r20
    2d96:	77 27       	eor	r23, r23
    2d98:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__udivmodhi4>
    2d9c:	80 5d       	subi	r24, 0xD0	; 208
    2d9e:	8a 33       	cpi	r24, 0x3A	; 58
    2da0:	0c f0       	brlt	.+2      	; 0x2da4 <itoa+0x2c>
    2da2:	89 5d       	subi	r24, 0xD9	; 217
    2da4:	81 93       	st	Z+, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	a1 f7       	brne	.-24     	; 0x2d94 <itoa+0x1c>
    2dac:	16 f4       	brtc	.+4      	; 0x2db2 <itoa+0x3a>
    2dae:	5d e2       	ldi	r21, 0x2D	; 45
    2db0:	51 93       	st	Z+, r21
    2db2:	10 82       	st	Z, r1
    2db4:	c9 01       	movw	r24, r18
    2db6:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <strrev>

00002dba <strrev>:
    2dba:	dc 01       	movw	r26, r24
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	67 2f       	mov	r22, r23
    2dc0:	71 91       	ld	r23, Z+
    2dc2:	77 23       	and	r23, r23
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <strrev+0x4>
    2dc6:	32 97       	sbiw	r30, 0x02	; 2
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <strrev+0x18>
    2dca:	7c 91       	ld	r23, X
    2dcc:	6d 93       	st	X+, r22
    2dce:	70 83       	st	Z, r23
    2dd0:	62 91       	ld	r22, -Z
    2dd2:	ae 17       	cp	r26, r30
    2dd4:	bf 07       	cpc	r27, r31
    2dd6:	c8 f3       	brcs	.-14     	; 0x2dca <strrev+0x10>
    2dd8:	08 95       	ret

00002dda <__udivmodhi4>:
    2dda:	aa 1b       	sub	r26, r26
    2ddc:	bb 1b       	sub	r27, r27
    2dde:	51 e1       	ldi	r21, 0x11	; 17
    2de0:	07 c0       	rjmp	.+14     	; 0x2df0 <__udivmodhi4_ep>

00002de2 <__udivmodhi4_loop>:
    2de2:	aa 1f       	adc	r26, r26
    2de4:	bb 1f       	adc	r27, r27
    2de6:	a6 17       	cp	r26, r22
    2de8:	b7 07       	cpc	r27, r23
    2dea:	10 f0       	brcs	.+4      	; 0x2df0 <__udivmodhi4_ep>
    2dec:	a6 1b       	sub	r26, r22
    2dee:	b7 0b       	sbc	r27, r23

00002df0 <__udivmodhi4_ep>:
    2df0:	88 1f       	adc	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	5a 95       	dec	r21
    2df6:	a9 f7       	brne	.-22     	; 0x2de2 <__udivmodhi4_loop>
    2df8:	80 95       	com	r24
    2dfa:	90 95       	com	r25
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	08 95       	ret

00002e02 <_exit>:
    2e02:	f8 94       	cli

00002e04 <__stop_program>:
    2e04:	ff cf       	rjmp	.-2      	; 0x2e04 <__stop_program>
