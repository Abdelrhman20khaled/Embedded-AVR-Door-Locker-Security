
Control_Micro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002456  000024ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800078  00800078  00002502  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174d  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006465  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006715  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000835e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009249  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
      8a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <uart_send_password>:
 * keys (password) that user entered from keypad and then send it to UART as array
 * of bytes.
 *
 */

void uart_send_password (uint8 *arr){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <uart_send_password+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i =0; i<5; i++){
     b56:	19 82       	std	Y+1, r1	; 0x01
     b58:	0e c0       	rjmp	.+28     	; 0xb76 <uart_send_password+0x30>
		UART_sendByte(arr[i]);
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	9b 81       	ldd	r25, Y+3	; 0x03
     b64:	fc 01       	movw	r30, r24
     b66:	e2 0f       	add	r30, r18
     b68:	f3 1f       	adc	r31, r19
     b6a:	80 81       	ld	r24, Z
     b6c:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
 * of bytes.
 *
 */

void uart_send_password (uint8 *arr){
	for(uint8 i =0; i<5; i++){
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	85 30       	cpi	r24, 0x05	; 5
     b7a:	78 f3       	brcs	.-34     	; 0xb5a <uart_send_password+0x14>
		UART_sendByte(arr[i]);
	}
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <uart_receive_password>:
 * for make a code more easier and readable, that receive the bytes from the UART and
 * store it in the array that given to it by address to keep it is element safe through
 * the program.
 *
 */
void uart_receive_password(uint8 *arr){
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <uart_receive_password+0xa>
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	9b 83       	std	Y+3, r25	; 0x03
     b9a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 j=0 ; j<5;j++){
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	0f c0       	rjmp	.+30     	; 0xbbe <uart_receive_password+0x36>
		arr[j] = UART_recieveByte();
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	9b 81       	ldd	r25, Y+3	; 0x03
     baa:	8c 01       	movw	r16, r24
     bac:	02 0f       	add	r16, r18
     bae:	13 1f       	adc	r17, r19
     bb0:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
     bb4:	f8 01       	movw	r30, r16
     bb6:	80 83       	st	Z, r24
 * store it in the array that given to it by address to keep it is element safe through
 * the program.
 *
 */
void uart_receive_password(uint8 *arr){
	for(uint8 j=0 ; j<5;j++){
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	70 f3       	brcs	.-36     	; 0xba0 <uart_receive_password+0x18>
		arr[j] = UART_recieveByte();
	}
}/*End of the function*/
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <check_two_passwords>:
 * Description:
 * this function take three inputs from HMI and check if the arrays are rqual
 * or not.
 *
 */
void check_two_passwords(uint8 *arr1 , uint8 *arr2, uint8 * flag){
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	27 97       	sbiw	r28, 0x07	; 7
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	9b 83       	std	Y+3, r25	; 0x03
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	7d 83       	std	Y+5, r23	; 0x05
     bee:	6c 83       	std	Y+4, r22	; 0x04
     bf0:	5f 83       	std	Y+7, r21	; 0x07
     bf2:	4e 83       	std	Y+6, r20	; 0x06
	*flag = 1;
     bf4:	ee 81       	ldd	r30, Y+6	; 0x06
     bf6:	ff 81       	ldd	r31, Y+7	; 0x07
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 83       	st	Z, r24
	for(uint8 i = 0 ; i<5;i++){
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	1a c0       	rjmp	.+52     	; 0xc34 <check_two_passwords+0x60>
		if(arr1[i] != arr2[i]){
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	9b 81       	ldd	r25, Y+3	; 0x03
     c0a:	fc 01       	movw	r30, r24
     c0c:	e2 0f       	add	r30, r18
     c0e:	f3 1f       	adc	r31, r19
     c10:	40 81       	ld	r20, Z
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	8c 81       	ldd	r24, Y+4	; 0x04
     c1a:	9d 81       	ldd	r25, Y+5	; 0x05
     c1c:	fc 01       	movw	r30, r24
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	80 81       	ld	r24, Z
     c24:	48 17       	cp	r20, r24
     c26:	19 f0       	breq	.+6      	; 0xc2e <check_two_passwords+0x5a>
			*flag = 0;
     c28:	ee 81       	ldd	r30, Y+6	; 0x06
     c2a:	ff 81       	ldd	r31, Y+7	; 0x07
     c2c:	10 82       	st	Z, r1
 * or not.
 *
 */
void check_two_passwords(uint8 *arr1 , uint8 *arr2, uint8 * flag){
	*flag = 1;
	for(uint8 i = 0 ; i<5;i++){
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	85 30       	cpi	r24, 0x05	; 5
     c38:	18 f3       	brcs	.-58     	; 0xc00 <check_two_passwords+0x2c>
		if(arr1[i] != arr2[i]){
			*flag = 0;
		}
	}
}/*End of the function*/
     c3a:	27 96       	adiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <motor_rotate_callback>:
 * happen this function called by it is pointer that point to first line in it, when
 * interrupt happen the function will increase the number of ticks that means count ticks
 * until the program needed.
 *
 */
void motor_rotate_callback (void){
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	timer_motor_tick ++;
     c54:	80 91 78 00 	lds	r24, 0x0078
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 78 00 	sts	0x0078, r24
}/*End of the callback function*/
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <main>:


/*******************************************************************************
 | 							     Start Main Functions                          |
 *******************************************************************************/
int main(){
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	ce 56       	subi	r28, 0x6E	; 110
     c72:	d0 40       	sbci	r29, 0x00	; 0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61

	/*For Enable the Global interrupt bit ( I - BIT)*/
	SREG |= (1<<7);
     c7e:	af e5       	ldi	r26, 0x5F	; 95
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ef e5       	ldi	r30, 0x5F	; 95
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	8c 93       	st	X, r24
	/*******************************************************************************
| 								Local Variables                                |
	 *******************************************************************************/

	uint8 data_places_in_EEPROM = 0;/*flag check if data placed in EEPROM*/
     c8c:	fe 01       	movw	r30, r28
     c8e:	ef 5b       	subi	r30, 0xBF	; 191
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	10 82       	st	Z, r1

	uint8 uart_status_flag=0;/*THE VARIABLE THAT RECEIVED FROM HMI and switch on it */
     c94:	fe 01       	movw	r30, r28
     c96:	e0 5c       	subi	r30, 0xC0	; 192
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	10 82       	st	Z, r1

	uint8 password_one_received = 0;/*flag check that password one received from HMI*/
     c9c:	1f ae       	std	Y+63, r1	; 0x3f

	uint8 password_two_received = 0;/*flag check that password two received from HMI*/
     c9e:	1e ae       	std	Y+62, r1	; 0x3e

	uint8 pass_temp_var = 0;/*this temporary variable for receiving data from EERPOM */
     ca0:	fe 01       	movw	r30, r28
     ca2:	ee 5b       	subi	r30, 0xBE	; 190
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	10 82       	st	Z, r1

	uint8 check_pass_before_change[5];/*array store in it password for checking the user enter two equal password */

	uint8 check_temp_pass = 1;/*this variable used for return data from EEPROM when want to change password */
     ca8:	fe 01       	movw	r30, r28
     caa:	e8 5b       	subi	r30, 0xB8	; 184
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 83       	st	Z, r24

	uint8 receive_new_password_arrary1[5];/*array for receive the First new password to check before changed*/

	uint8 receive_new_password_arrary2[5];/*array for receive the Second new password to check before changed*/

	uint8 check_received_new_pass_array1 = 0; /*flag that this device receive the first new password before changed */
     cb2:	1d ae       	std	Y+61, r1	; 0x3d

	uint8 check_received_new_pass_array2 = 0;/*flag that this device receive the second new password before changed */
     cb4:	1c ae       	std	Y+60, r1	; 0x3c

	uint8 two_new_paswwords_are_equal = 1;/*flag for check that two new passwords are equal to confirm changed*/
     cb6:	fe 01       	movw	r30, r28
     cb8:	ed 5a       	subi	r30, 0xAD	; 173
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 83       	st	Z, r24
	 * 	3- Using 1 stop bit.
	 * 	4- Using Baud rate 9600.
	 *
	 */

	UART_ConfigType uart_config_control = {Frame_8_bit,Parity_Disable,Stop_1_bit,Buad_Rate_9600};
     cc0:	ce 01       	movw	r24, r28
     cc2:	8c 5a       	subi	r24, 0xAC	; 172
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	a7 96       	adiw	r28, 0x27	; 39
     cc8:	9f af       	std	Y+63, r25	; 0x3f
     cca:	8e af       	std	Y+62, r24	; 0x3e
     ccc:	a7 97       	sbiw	r28, 0x27	; 39
     cce:	21 e7       	ldi	r18, 0x71	; 113
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	a9 96       	adiw	r28, 0x29	; 41
     cd4:	3f af       	std	Y+63, r19	; 0x3f
     cd6:	2e af       	std	Y+62, r18	; 0x3e
     cd8:	a9 97       	sbiw	r28, 0x29	; 41
     cda:	37 e0       	ldi	r19, 0x07	; 7
     cdc:	aa 96       	adiw	r28, 0x2a	; 42
     cde:	3f af       	std	Y+63, r19	; 0x3f
     ce0:	aa 97       	sbiw	r28, 0x2a	; 42
     ce2:	a9 96       	adiw	r28, 0x29	; 41
     ce4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce8:	a9 97       	sbiw	r28, 0x29	; 41
     cea:	00 80       	ld	r0, Z
     cec:	a9 96       	adiw	r28, 0x29	; 41
     cee:	2e ad       	ldd	r18, Y+62	; 0x3e
     cf0:	3f ad       	ldd	r19, Y+63	; 0x3f
     cf2:	a9 97       	sbiw	r28, 0x29	; 41
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	a9 96       	adiw	r28, 0x29	; 41
     cfa:	3f af       	std	Y+63, r19	; 0x3f
     cfc:	2e af       	std	Y+62, r18	; 0x3e
     cfe:	a9 97       	sbiw	r28, 0x29	; 41
     d00:	a7 96       	adiw	r28, 0x27	; 39
     d02:	ee ad       	ldd	r30, Y+62	; 0x3e
     d04:	ff ad       	ldd	r31, Y+63	; 0x3f
     d06:	a7 97       	sbiw	r28, 0x27	; 39
     d08:	00 82       	st	Z, r0
     d0a:	a7 96       	adiw	r28, 0x27	; 39
     d0c:	2e ad       	ldd	r18, Y+62	; 0x3e
     d0e:	3f ad       	ldd	r19, Y+63	; 0x3f
     d10:	a7 97       	sbiw	r28, 0x27	; 39
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	a7 96       	adiw	r28, 0x27	; 39
     d18:	3f af       	std	Y+63, r19	; 0x3f
     d1a:	2e af       	std	Y+62, r18	; 0x3e
     d1c:	a7 97       	sbiw	r28, 0x27	; 39
     d1e:	aa 96       	adiw	r28, 0x2a	; 42
     d20:	3f ad       	ldd	r19, Y+63	; 0x3f
     d22:	aa 97       	sbiw	r28, 0x2a	; 42
     d24:	31 50       	subi	r19, 0x01	; 1
     d26:	aa 96       	adiw	r28, 0x2a	; 42
     d28:	3f af       	std	Y+63, r19	; 0x3f
     d2a:	aa 97       	sbiw	r28, 0x2a	; 42
     d2c:	aa 96       	adiw	r28, 0x2a	; 42
     d2e:	8f ad       	ldd	r24, Y+63	; 0x3f
     d30:	aa 97       	sbiw	r28, 0x2a	; 42
     d32:	88 23       	and	r24, r24
     d34:	b1 f6       	brne	.-84     	; 0xce2 <main+0x7e>
	 * 	3- using prescalar 1024.
	 * 	4- Using mode of the timer it will be : Compare Mode.
	 *
	 */

	Timer1_ConfigType timer_config_control = {0,31249,Prescalar_256,Compare_Mode};
     d36:	ce 01       	movw	r24, r28
     d38:	85 5a       	subi	r24, 0xA5	; 165
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	ac 96       	adiw	r28, 0x2c	; 44
     d3e:	9f af       	std	Y+63, r25	; 0x3f
     d40:	8e af       	std	Y+62, r24	; 0x3e
     d42:	ac 97       	sbiw	r28, 0x2c	; 44
     d44:	eb e6       	ldi	r30, 0x6B	; 107
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ae 96       	adiw	r28, 0x2e	; 46
     d4a:	ff af       	std	Y+63, r31	; 0x3f
     d4c:	ee af       	std	Y+62, r30	; 0x3e
     d4e:	ae 97       	sbiw	r28, 0x2e	; 46
     d50:	f6 e0       	ldi	r31, 0x06	; 6
     d52:	af 96       	adiw	r28, 0x2f	; 47
     d54:	ff af       	std	Y+63, r31	; 0x3f
     d56:	af 97       	sbiw	r28, 0x2f	; 47
     d58:	ae 96       	adiw	r28, 0x2e	; 46
     d5a:	ee ad       	ldd	r30, Y+62	; 0x3e
     d5c:	ff ad       	ldd	r31, Y+63	; 0x3f
     d5e:	ae 97       	sbiw	r28, 0x2e	; 46
     d60:	00 80       	ld	r0, Z
     d62:	ae 96       	adiw	r28, 0x2e	; 46
     d64:	2e ad       	ldd	r18, Y+62	; 0x3e
     d66:	3f ad       	ldd	r19, Y+63	; 0x3f
     d68:	ae 97       	sbiw	r28, 0x2e	; 46
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
     d6e:	ae 96       	adiw	r28, 0x2e	; 46
     d70:	3f af       	std	Y+63, r19	; 0x3f
     d72:	2e af       	std	Y+62, r18	; 0x3e
     d74:	ae 97       	sbiw	r28, 0x2e	; 46
     d76:	ac 96       	adiw	r28, 0x2c	; 44
     d78:	ee ad       	ldd	r30, Y+62	; 0x3e
     d7a:	ff ad       	ldd	r31, Y+63	; 0x3f
     d7c:	ac 97       	sbiw	r28, 0x2c	; 44
     d7e:	00 82       	st	Z, r0
     d80:	ac 96       	adiw	r28, 0x2c	; 44
     d82:	2e ad       	ldd	r18, Y+62	; 0x3e
     d84:	3f ad       	ldd	r19, Y+63	; 0x3f
     d86:	ac 97       	sbiw	r28, 0x2c	; 44
     d88:	2f 5f       	subi	r18, 0xFF	; 255
     d8a:	3f 4f       	sbci	r19, 0xFF	; 255
     d8c:	ac 96       	adiw	r28, 0x2c	; 44
     d8e:	3f af       	std	Y+63, r19	; 0x3f
     d90:	2e af       	std	Y+62, r18	; 0x3e
     d92:	ac 97       	sbiw	r28, 0x2c	; 44
     d94:	af 96       	adiw	r28, 0x2f	; 47
     d96:	3f ad       	ldd	r19, Y+63	; 0x3f
     d98:	af 97       	sbiw	r28, 0x2f	; 47
     d9a:	31 50       	subi	r19, 0x01	; 1
     d9c:	af 96       	adiw	r28, 0x2f	; 47
     d9e:	3f af       	std	Y+63, r19	; 0x3f
     da0:	af 97       	sbiw	r28, 0x2f	; 47
     da2:	af 96       	adiw	r28, 0x2f	; 47
     da4:	8f ad       	ldd	r24, Y+63	; 0x3f
     da6:	af 97       	sbiw	r28, 0x2f	; 47
     da8:	88 23       	and	r24, r24
     daa:	b1 f6       	brne	.-84     	; 0xd58 <main+0xf4>
	 * 1- give the address for MICRO-Controller is 0X01.
	 * 2- USING Baud Rate 400 KHZ this has a decimal value equal 2 put in the register
	 *
	 */

	TWI_ConfigType i2c_config_control = {0X01,Bit_Rate_400KHZ};
     dac:	fe 01       	movw	r30, r28
     dae:	ef 59       	subi	r30, 0x9F	; 159
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 83       	st	Z, r24
     db6:	fe 01       	movw	r30, r28
     db8:	ef 59       	subi	r30, 0x9F	; 159
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	81 83       	std	Z+1, r24	; 0x01
	/*******************************************************************************
| 							Initialization Functions                           |
	 *******************************************************************************/

	/* this function prepare the UART to work with the uart_config_HMI inputs*/
	UART_init(&uart_config_control);
     dc0:	ce 01       	movw	r24, r28
     dc2:	8c 5a       	subi	r24, 0xAC	; 172
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_init>

	/* this function prepare the TIMER1 to work with the timer_config_HMI inputs*/
	//Timer1_init(&timer_config_control);

	/* this function prepare the I2C to work with the timer_config_HMI inputs*/
	I2C_init(&i2c_config_control);
     dca:	ce 01       	movw	r24, r28
     dcc:	8f 59       	subi	r24, 0x9F	; 159
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <I2C_init>

	/* this function prepare the Motor to work with the timer_config_HMI inputs*/
	DcMotor_Init();
     dd4:	0e 94 c7 0a 	call	0x158e	; 0x158e <DcMotor_Init>

	/* this function prepare the Buzzer to work with the timer_config_HMI inputs*/
	Buzzer_init();
     dd8:	0e 94 9e 0a 	call	0x153c	; 0x153c <Buzzer_init>
	while(1){

		/*
		 * this variable responsible for Switch on nay operation received by UART
		 */
		uart_status_flag = UART_recieveByte();
     ddc:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
     de0:	fe 01       	movw	r30, r28
     de2:	e0 5c       	subi	r30, 0xC0	; 192
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 83       	st	Z, r24

		switch(uart_status_flag){
     de8:	fe 01       	movw	r30, r28
     dea:	e0 5c       	subi	r30, 0xC0	; 192
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	e8 2f       	mov	r30, r24
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	a5 96       	adiw	r28, 0x25	; 37
     df6:	ff af       	std	Y+63, r31	; 0x3f
     df8:	ee af       	std	Y+62, r30	; 0x3e
     dfa:	a5 97       	sbiw	r28, 0x25	; 37
     dfc:	a5 96       	adiw	r28, 0x25	; 37
     dfe:	2e ad       	ldd	r18, Y+62	; 0x3e
     e00:	3f ad       	ldd	r19, Y+63	; 0x3f
     e02:	a5 97       	sbiw	r28, 0x25	; 37
     e04:	29 34       	cpi	r18, 0x49	; 73
     e06:	31 05       	cpc	r19, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <main+0x1a8>
     e0a:	c4 c2       	rjmp	.+1416   	; 0x1394 <main+0x730>
     e0c:	a5 96       	adiw	r28, 0x25	; 37
     e0e:	8e ad       	ldd	r24, Y+62	; 0x3e
     e10:	9f ad       	ldd	r25, Y+63	; 0x3f
     e12:	a5 97       	sbiw	r28, 0x25	; 37
     e14:	8a 34       	cpi	r24, 0x4A	; 74
     e16:	91 05       	cpc	r25, r1
     e18:	4c f5       	brge	.+82     	; 0xe6c <main+0x208>
     e1a:	a5 96       	adiw	r28, 0x25	; 37
     e1c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e1e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e20:	a5 97       	sbiw	r28, 0x25	; 37
     e22:	e3 34       	cpi	r30, 0x43	; 67
     e24:	f1 05       	cpc	r31, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <main+0x1c6>
     e28:	00 c2       	rjmp	.+1024   	; 0x122a <main+0x5c6>
     e2a:	a5 96       	adiw	r28, 0x25	; 37
     e2c:	2e ad       	ldd	r18, Y+62	; 0x3e
     e2e:	3f ad       	ldd	r19, Y+63	; 0x3f
     e30:	a5 97       	sbiw	r28, 0x25	; 37
     e32:	24 34       	cpi	r18, 0x44	; 68
     e34:	31 05       	cpc	r19, r1
     e36:	4c f4       	brge	.+18     	; 0xe4a <main+0x1e6>
     e38:	a5 96       	adiw	r28, 0x25	; 37
     e3a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e3c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e3e:	a5 97       	sbiw	r28, 0x25	; 37
     e40:	81 34       	cpi	r24, 0x41	; 65
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <main+0x1e4>
     e46:	57 c0       	rjmp	.+174    	; 0xef6 <main+0x292>
     e48:	c9 cf       	rjmp	.-110    	; 0xddc <main+0x178>
     e4a:	a5 96       	adiw	r28, 0x25	; 37
     e4c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e4e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e50:	a5 97       	sbiw	r28, 0x25	; 37
     e52:	e4 34       	cpi	r30, 0x44	; 68
     e54:	f1 05       	cpc	r31, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <main+0x1f6>
     e58:	02 c1       	rjmp	.+516    	; 0x105e <main+0x3fa>
     e5a:	a5 96       	adiw	r28, 0x25	; 37
     e5c:	2e ad       	ldd	r18, Y+62	; 0x3e
     e5e:	3f ad       	ldd	r19, Y+63	; 0x3f
     e60:	a5 97       	sbiw	r28, 0x25	; 37
     e62:	25 34       	cpi	r18, 0x45	; 69
     e64:	31 05       	cpc	r19, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <main+0x206>
     e68:	a8 c1       	rjmp	.+848    	; 0x11ba <main+0x556>
     e6a:	b8 cf       	rjmp	.-144    	; 0xddc <main+0x178>
     e6c:	a5 96       	adiw	r28, 0x25	; 37
     e6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     e70:	9f ad       	ldd	r25, Y+63	; 0x3f
     e72:	a5 97       	sbiw	r28, 0x25	; 37
     e74:	84 35       	cpi	r24, 0x54	; 84
     e76:	91 05       	cpc	r25, r1
     e78:	99 f1       	breq	.+102    	; 0xee0 <main+0x27c>
     e7a:	a5 96       	adiw	r28, 0x25	; 37
     e7c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e80:	a5 97       	sbiw	r28, 0x25	; 37
     e82:	e5 35       	cpi	r30, 0x55	; 85
     e84:	f1 05       	cpc	r31, r1
     e86:	84 f4       	brge	.+32     	; 0xea8 <main+0x244>
     e88:	a5 96       	adiw	r28, 0x25	; 37
     e8a:	2e ad       	ldd	r18, Y+62	; 0x3e
     e8c:	3f ad       	ldd	r19, Y+63	; 0x3f
     e8e:	a5 97       	sbiw	r28, 0x25	; 37
     e90:	2f 34       	cpi	r18, 0x4F	; 79
     e92:	31 05       	cpc	r19, r1
     e94:	d1 f0       	breq	.+52     	; 0xeca <main+0x266>
     e96:	a5 96       	adiw	r28, 0x25	; 37
     e98:	8e ad       	ldd	r24, Y+62	; 0x3e
     e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e9c:	a5 97       	sbiw	r28, 0x25	; 37
     e9e:	81 35       	cpi	r24, 0x51	; 81
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <main+0x242>
     ea4:	82 c2       	rjmp	.+1284   	; 0x13aa <main+0x746>
     ea6:	9a cf       	rjmp	.-204    	; 0xddc <main+0x178>
     ea8:	a5 96       	adiw	r28, 0x25	; 37
     eaa:	ee ad       	ldd	r30, Y+62	; 0x3e
     eac:	ff ad       	ldd	r31, Y+63	; 0x3f
     eae:	a5 97       	sbiw	r28, 0x25	; 37
     eb0:	e6 35       	cpi	r30, 0x56	; 86
     eb2:	f1 05       	cpc	r31, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <main+0x254>
     eb6:	84 c2       	rjmp	.+1288   	; 0x13c0 <main+0x75c>
     eb8:	a5 96       	adiw	r28, 0x25	; 37
     eba:	2e ad       	ldd	r18, Y+62	; 0x3e
     ebc:	3f ad       	ldd	r19, Y+63	; 0x3f
     ebe:	a5 97       	sbiw	r28, 0x25	; 37
     ec0:	28 35       	cpi	r18, 0x58	; 88
     ec2:	31 05       	cpc	r19, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <main+0x264>
     ec6:	23 c3       	rjmp	.+1606   	; 0x150e <main+0x8aa>
     ec8:	89 cf       	rjmp	.-238    	; 0xddc <main+0x178>
		 * and answer by a flag
		 *
		 */

		case PASSWORD_ONE_IS_RESIVED_Q:
			password_one_received = 0;
     eca:	1f ae       	std	Y+63, r1	; 0x3f
			uart_receive_password(received_pass_arr);
     ecc:	8a e8       	ldi	r24, 0x8A	; 138
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>
			password_one_received = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	8f af       	std	Y+63, r24	; 0x3f
			UART_sendByte(password_one_received);
     ed8:	8f ad       	ldd	r24, Y+63	; 0x3f
     eda:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
     ede:	7e cf       	rjmp	.-260    	; 0xddc <main+0x178>
			 * and answer by a flag
			 *
			 */

		case PASSWORD_TWO_IS_RESIVED_Q:
			password_two_received =0;
     ee0:	1e ae       	std	Y+62, r1	; 0x3e
			uart_receive_password(received_re_entered_pass_arr);
     ee2:	85 e8       	ldi	r24, 0x85	; 133
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>
			password_two_received = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8e af       	std	Y+62, r24	; 0x3e
			UART_sendByte(password_two_received);
     eee:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef0:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
     ef4:	73 cf       	rjmp	.-282    	; 0xddc <main+0x178>
			 *
			 */

		case ASK_UART_ABOUT_MATCHING_PASSWORDS:

			check_two_passwords(received_pass_arr,received_re_entered_pass_arr,&two_received_password_arrays_equality);
     ef6:	8a e8       	ldi	r24, 0x8A	; 138
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	25 e8       	ldi	r18, 0x85	; 133
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 e6       	ldi	r20, 0x68	; 104
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	b9 01       	movw	r22, r18
     f04:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <check_two_passwords>

			if( two_received_password_arrays_equality == 1 ){
     f08:	80 91 68 00 	lds	r24, 0x0068
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <main+0x2ae>
     f10:	9f c0       	rjmp	.+318    	; 0x1050 <main+0x3ec>

				UART_sendByte(MATCHED);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>

				for(data_places_in_EEPROM = 0; data_places_in_EEPROM < 5; data_places_in_EEPROM++){
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 5b       	subi	r30, 0xBF	; 191
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	10 82       	st	Z, r1
     f20:	8f c0       	rjmp	.+286    	; 0x1040 <main+0x3dc>

					EEPROM_writeByte(data_places_in_EEPROM,received_pass_arr[data_places_in_EEPROM]);
     f22:	fe 01       	movw	r30, r28
     f24:	ef 5b       	subi	r30, 0xBF	; 191
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	fe 01       	movw	r30, r28
     f30:	ef 5b       	subi	r30, 0xBF	; 191
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	fc 01       	movw	r30, r24
     f3c:	e6 57       	subi	r30, 0x76	; 118
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	20 81       	ld	r18, Z
     f42:	ca 01       	movw	r24, r20
     f44:	62 2f       	mov	r22, r18
     f46:	0e 94 1a 0b 	call	0x1634	; 0x1634 <EEPROM_writeByte>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e2       	ldi	r26, 0x20	; 32
     f50:	b1 e4       	ldi	r27, 0x41	; 65
     f52:	8d ab       	std	Y+53, r24	; 0x35
     f54:	9e ab       	std	Y+54, r25	; 0x36
     f56:	af ab       	std	Y+55, r26	; 0x37
     f58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5a:	6d a9       	ldd	r22, Y+53	; 0x35
     f5c:	7e a9       	ldd	r23, Y+54	; 0x36
     f5e:	8f a9       	ldd	r24, Y+55	; 0x37
     f60:	98 ad       	ldd	r25, Y+56	; 0x38
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a ef       	ldi	r20, 0xFA	; 250
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	89 ab       	std	Y+49, r24	; 0x31
     f74:	9a ab       	std	Y+50, r25	; 0x32
     f76:	ab ab       	std	Y+51, r26	; 0x33
     f78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f7a:	69 a9       	ldd	r22, Y+49	; 0x31
     f7c:	7a a9       	ldd	r23, Y+50	; 0x32
     f7e:	8b a9       	ldd	r24, Y+51	; 0x33
     f80:	9c a9       	ldd	r25, Y+52	; 0x34
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8e:	88 23       	and	r24, r24
     f90:	2c f4       	brge	.+10     	; 0xf9c <main+0x338>
		__ticks = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	98 ab       	std	Y+48, r25	; 0x30
     f98:	8f a7       	std	Y+47, r24	; 0x2f
     f9a:	3f c0       	rjmp	.+126    	; 0x101a <main+0x3b6>
	else if (__tmp > 65535)
     f9c:	69 a9       	ldd	r22, Y+49	; 0x31
     f9e:	7a a9       	ldd	r23, Y+50	; 0x32
     fa0:	8b a9       	ldd	r24, Y+51	; 0x33
     fa2:	9c a9       	ldd	r25, Y+52	; 0x34
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	3f ef       	ldi	r19, 0xFF	; 255
     fa8:	4f e7       	ldi	r20, 0x7F	; 127
     faa:	57 e4       	ldi	r21, 0x47	; 71
     fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb0:	18 16       	cp	r1, r24
     fb2:	4c f5       	brge	.+82     	; 0x1006 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb4:	6d a9       	ldd	r22, Y+53	; 0x35
     fb6:	7e a9       	ldd	r23, Y+54	; 0x36
     fb8:	8f a9       	ldd	r24, Y+55	; 0x37
     fba:	98 ad       	ldd	r25, Y+56	; 0x38
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e2       	ldi	r20, 0x20	; 32
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	98 ab       	std	Y+48, r25	; 0x30
     fda:	8f a7       	std	Y+47, r24	; 0x2f
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <main+0x398>
     fde:	88 ec       	ldi	r24, 0xC8	; 200
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9e a7       	std	Y+46, r25	; 0x2e
     fe4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
     fe8:	9e a5       	ldd	r25, Y+46	; 0x2e
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <main+0x386>
     fee:	9e a7       	std	Y+46, r25	; 0x2e
     ff0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff4:	98 a9       	ldd	r25, Y+48	; 0x30
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	98 ab       	std	Y+48, r25	; 0x30
     ffa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	69 f7       	brne	.-38     	; 0xfde <main+0x37a>
    1004:	14 c0       	rjmp	.+40     	; 0x102e <main+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1006:	69 a9       	ldd	r22, Y+49	; 0x31
    1008:	7a a9       	ldd	r23, Y+50	; 0x32
    100a:	8b a9       	ldd	r24, Y+51	; 0x33
    100c:	9c a9       	ldd	r25, Y+52	; 0x34
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	98 ab       	std	Y+48, r25	; 0x30
    1018:	8f a7       	std	Y+47, r24	; 0x2f
    101a:	8f a5       	ldd	r24, Y+47	; 0x2f
    101c:	98 a9       	ldd	r25, Y+48	; 0x30
    101e:	9c a7       	std	Y+44, r25	; 0x2c
    1020:	8b a7       	std	Y+43, r24	; 0x2b
    1022:	8b a5       	ldd	r24, Y+43	; 0x2b
    1024:	9c a5       	ldd	r25, Y+44	; 0x2c
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <main+0x3c2>
    102a:	9c a7       	std	Y+44, r25	; 0x2c
    102c:	8b a7       	std	Y+43, r24	; 0x2b

			if( two_received_password_arrays_equality == 1 ){

				UART_sendByte(MATCHED);

				for(data_places_in_EEPROM = 0; data_places_in_EEPROM < 5; data_places_in_EEPROM++){
    102e:	de 01       	movw	r26, r28
    1030:	af 5b       	subi	r26, 0xBF	; 191
    1032:	bf 4f       	sbci	r27, 0xFF	; 255
    1034:	fe 01       	movw	r30, r28
    1036:	ef 5b       	subi	r30, 0xBF	; 191
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 81       	ld	r24, Z
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	8c 93       	st	X, r24
    1040:	fe 01       	movw	r30, r28
    1042:	ef 5b       	subi	r30, 0xBF	; 191
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	85 30       	cpi	r24, 0x05	; 5
    104a:	08 f4       	brcc	.+2      	; 0x104e <main+0x3ea>
    104c:	6a cf       	rjmp	.-300    	; 0xf22 <main+0x2be>
    104e:	c6 ce       	rjmp	.-628    	; 0xddc <main+0x178>
				}
				//two_received_password_arrays_equality=0;
			}
			else{

				UART_sendByte(NOT_MATCHED);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
				two_received_password_arrays_equality=1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 68 00 	sts	0x0068, r24
    105c:	bf ce       	rjmp	.-642    	; 0xddc <main+0x178>
			 *
			 */

		case SENDED_DATA_MATCHES_EEPROM:

			uart_receive_password(check_password);
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>

			for(uint8 j =0; j<5;j++){
    1066:	1b ae       	std	Y+59, r1	; 0x3b
    1068:	95 c0       	rjmp	.+298    	; 0x1194 <main+0x530>

				received_data_from_EEPROM[j] = EEPROM_readByte(j,&pass_temp_var);
    106a:	8b ad       	ldd	r24, Y+59	; 0x3b
    106c:	08 2f       	mov	r16, r24
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	8b ad       	ldd	r24, Y+59	; 0x3b
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e 01       	movw	r18, r28
    1078:	2e 5b       	subi	r18, 0xBE	; 190
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	b9 01       	movw	r22, r18
    107e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <EEPROM_readByte>
    1082:	f8 01       	movw	r30, r16
    1084:	e5 58       	subi	r30, 0x85	; 133
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 83       	st	Z, r24

				if(check_password[j] != pass_temp_var){
    108a:	8b ad       	ldd	r24, Y+59	; 0x3b
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	e0 58       	subi	r30, 0x80	; 128
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	90 81       	ld	r25, Z
    1098:	fe 01       	movw	r30, r28
    109a:	ee 5b       	subi	r30, 0xBE	; 190
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 81       	ld	r24, Z
    10a0:	98 17       	cp	r25, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <main+0x442>
    10a4:	74 c0       	rjmp	.+232    	; 0x118e <main+0x52a>
					received_pass_EEPROM = 0;
    10a6:	10 92 69 00 	sts	0x0069, r1
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e2       	ldi	r26, 0x20	; 32
    10b0:	b1 e4       	ldi	r27, 0x41	; 65
    10b2:	8f a3       	std	Y+39, r24	; 0x27
    10b4:	98 a7       	std	Y+40, r25	; 0x28
    10b6:	a9 a7       	std	Y+41, r26	; 0x29
    10b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6f a1       	ldd	r22, Y+39	; 0x27
    10bc:	78 a5       	ldd	r23, Y+40	; 0x28
    10be:	89 a5       	ldd	r24, Y+41	; 0x29
    10c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a ef       	ldi	r20, 0xFA	; 250
    10c8:	54 e4       	ldi	r21, 0x44	; 68
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8b a3       	std	Y+35, r24	; 0x23
    10d4:	9c a3       	std	Y+36, r25	; 0x24
    10d6:	ad a3       	std	Y+37, r26	; 0x25
    10d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <main+0x498>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9a a3       	std	Y+34, r25	; 0x22
    10f8:	89 a3       	std	Y+33, r24	; 0x21
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <main+0x516>
	else if (__tmp > 65535)
    10fc:	6b a1       	ldd	r22, Y+35	; 0x23
    10fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1100:	8d a1       	ldd	r24, Y+37	; 0x25
    1102:	9e a1       	ldd	r25, Y+38	; 0x26
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <main+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6f a1       	ldd	r22, Y+39	; 0x27
    1116:	78 a5       	ldd	r23, Y+40	; 0x28
    1118:	89 a5       	ldd	r24, Y+41	; 0x29
    111a:	9a a5       	ldd	r25, Y+42	; 0x2a
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9a a3       	std	Y+34, r25	; 0x22
    113a:	89 a3       	std	Y+33, r24	; 0x21
    113c:	0f c0       	rjmp	.+30     	; 0x115c <main+0x4f8>
    113e:	88 ec       	ldi	r24, 0xC8	; 200
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	98 a3       	std	Y+32, r25	; 0x20
    1144:	8f 8f       	std	Y+31, r24	; 0x1f
    1146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1148:	98 a1       	ldd	r25, Y+32	; 0x20
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <main+0x4e6>
    114e:	98 a3       	std	Y+32, r25	; 0x20
    1150:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	89 a1       	ldd	r24, Y+33	; 0x21
    1154:	9a a1       	ldd	r25, Y+34	; 0x22
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9a a3       	std	Y+34, r25	; 0x22
    115a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	89 a1       	ldd	r24, Y+33	; 0x21
    115e:	9a a1       	ldd	r25, Y+34	; 0x22
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <main+0x4da>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <main+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6b a1       	ldd	r22, Y+35	; 0x23
    1168:	7c a1       	ldd	r23, Y+36	; 0x24
    116a:	8d a1       	ldd	r24, Y+37	; 0x25
    116c:	9e a1       	ldd	r25, Y+38	; 0x26
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
    117a:	89 a1       	ldd	r24, Y+33	; 0x21
    117c:	9a a1       	ldd	r25, Y+34	; 0x22
    117e:	9e 8f       	std	Y+30, r25	; 0x1e
    1180:	8d 8f       	std	Y+29, r24	; 0x1d
    1182:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1184:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <main+0x522>
    118a:	9e 8f       	std	Y+30, r25	; 0x1e
    118c:	8d 8f       	std	Y+29, r24	; 0x1d

		case SENDED_DATA_MATCHES_EEPROM:

			uart_receive_password(check_password);

			for(uint8 j =0; j<5;j++){
    118e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8b af       	std	Y+59, r24	; 0x3b
    1194:	8b ad       	ldd	r24, Y+59	; 0x3b
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	08 f4       	brcc	.+2      	; 0x119c <main+0x538>
    119a:	67 cf       	rjmp	.-306    	; 0x106a <main+0x406>
				}


			}

			if(received_pass_EEPROM){
    119c:	80 91 69 00 	lds	r24, 0x0069
    11a0:	88 23       	and	r24, r24
    11a2:	21 f0       	breq	.+8      	; 0x11ac <main+0x548>
				UART_sendByte(PASS_FETCH_IS_CORRECT);
    11a4:	80 e5       	ldi	r24, 0x50	; 80
    11a6:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
    11aa:	18 ce       	rjmp	.-976    	; 0xddc <main+0x178>
			}
			else{
				UART_sendByte(PASS_FETCH_IS_NOT_CORRECT);
    11ac:	83 e5       	ldi	r24, 0x53	; 83
    11ae:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
				received_pass_EEPROM = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 69 00 	sts	0x0069, r24
    11b8:	11 ce       	rjmp	.-990    	; 0xddc <main+0x178>
			 *
			 */

		case DOOR_IS_OPEN:

			Timer1_init(&timer_config_control);
    11ba:	ce 01       	movw	r24, r28
    11bc:	85 5a       	subi	r24, 0xA5	; 165
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	0e 94 25 10 	call	0x204a	; 0x204a <Timer1_init>

			Timer1_setCallBack(motor_rotate_callback);
    11c4:	86 e2       	ldi	r24, 0x26	; 38
    11c6:	96 e0       	ldi	r25, 0x06	; 6
    11c8:	0e 94 86 10 	call	0x210c	; 0x210c <Timer1_setCallBack>

			DcMotor_Rotate(Motor_CW,100);
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	64 e6       	ldi	r22, 0x64	; 100
    11d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DcMotor_Rotate>
			while(timer_motor_tick != 15);
    11d4:	80 91 78 00 	lds	r24, 0x0078
    11d8:	8f 30       	cpi	r24, 0x0F	; 15
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <main+0x570>
			timer_motor_tick=0;
    11dc:	10 92 78 00 	sts	0x0078, r1



			Timer1_init(&timer_config_control);
    11e0:	ce 01       	movw	r24, r28
    11e2:	85 5a       	subi	r24, 0xA5	; 165
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	0e 94 25 10 	call	0x204a	; 0x204a <Timer1_init>
			DcMotor_Rotate(Motor_Stop,0);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DcMotor_Rotate>
			while(timer_motor_tick != 3);
    11f2:	80 91 78 00 	lds	r24, 0x0078
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <main+0x58e>
			timer_motor_tick=0;
    11fa:	10 92 78 00 	sts	0x0078, r1


			Timer1_init(&timer_config_control);
    11fe:	ce 01       	movw	r24, r28
    1200:	85 5a       	subi	r24, 0xA5	; 165
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	0e 94 25 10 	call	0x204a	; 0x204a <Timer1_init>
			DcMotor_Rotate(Motor_A_CW,100);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	64 e6       	ldi	r22, 0x64	; 100
    120c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DcMotor_Rotate>
			while(timer_motor_tick != 15);
    1210:	80 91 78 00 	lds	r24, 0x0078
    1214:	8f 30       	cpi	r24, 0x0F	; 15
    1216:	e1 f7       	brne	.-8      	; 0x1210 <main+0x5ac>
			DcMotor_Rotate(Motor_Stop,0);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <DcMotor_Rotate>
			timer_motor_tick=0;
    1220:	10 92 78 00 	sts	0x0078, r1

			Timer1_deInit();
    1224:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Timer1_deInit>
    1228:	d9 cd       	rjmp	.-1102   	; 0xddc <main+0x178>

		case CHANGE_PASSWORD :

			//check_temp_pass=0;

			received_pass_EEPROM = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 69 00 	sts	0x0069, r24

			uart_receive_password(check_pass_before_change);
    1230:	ce 01       	movw	r24, r28
    1232:	8d 5b       	subi	r24, 0xBD	; 189
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>

			for(uint8 j =0; j<5;j++){
    123a:	1a ae       	std	Y+58, r1	; 0x3a
    123c:	98 c0       	rjmp	.+304    	; 0x136e <main+0x70a>

				received_data_from_EEPROM[j] = EEPROM_readByte(j,&check_temp_pass);
    123e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1240:	08 2f       	mov	r16, r24
    1242:	10 e0       	ldi	r17, 0x00	; 0
    1244:	8a ad       	ldd	r24, Y+58	; 0x3a
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9e 01       	movw	r18, r28
    124c:	28 5b       	subi	r18, 0xB8	; 184
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	b9 01       	movw	r22, r18
    1252:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <EEPROM_readByte>
    1256:	f8 01       	movw	r30, r16
    1258:	e5 58       	subi	r30, 0x85	; 133
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 83       	st	Z, r24

				if(check_pass_before_change[j] != check_temp_pass){
    125e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	ce 01       	movw	r24, r28
    1266:	8d 5b       	subi	r24, 0xBD	; 189
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	fc 01       	movw	r30, r24
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	90 81       	ld	r25, Z
    1272:	fe 01       	movw	r30, r28
    1274:	e8 5b       	subi	r30, 0xB8	; 184
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	98 17       	cp	r25, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <main+0x61c>
    127e:	74 c0       	rjmp	.+232    	; 0x1368 <main+0x704>
					check_change_received_pass_EEPROM = 0;
    1280:	10 92 6a 00 	sts	0x006A, r1
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e2       	ldi	r26, 0x20	; 32
    128a:	b1 e4       	ldi	r27, 0x41	; 65
    128c:	89 8f       	std	Y+25, r24	; 0x19
    128e:	9a 8f       	std	Y+26, r25	; 0x1a
    1290:	ab 8f       	std	Y+27, r26	; 0x1b
    1292:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	69 8d       	ldd	r22, Y+25	; 0x19
    1296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1298:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8d 8b       	std	Y+21, r24	; 0x15
    12ae:	9e 8b       	std	Y+22, r25	; 0x16
    12b0:	af 8b       	std	Y+23, r26	; 0x17
    12b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b4:	6d 89       	ldd	r22, Y+21	; 0x15
    12b6:	7e 89       	ldd	r23, Y+22	; 0x16
    12b8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ba:	98 8d       	ldd	r25, Y+24	; 0x18
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <main+0x672>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <main+0x6f0>
	else if (__tmp > 65535)
    12d6:	6d 89       	ldd	r22, Y+21	; 0x15
    12d8:	7e 89       	ldd	r23, Y+22	; 0x16
    12da:	8f 89       	ldd	r24, Y+23	; 0x17
    12dc:	98 8d       	ldd	r25, Y+24	; 0x18
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <main+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	69 8d       	ldd	r22, Y+25	; 0x19
    12f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9c 8b       	std	Y+20, r25	; 0x14
    1314:	8b 8b       	std	Y+19, r24	; 0x13
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <main+0x6d2>
    1318:	88 ec       	ldi	r24, 0xC8	; 200
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9a 8b       	std	Y+18, r25	; 0x12
    131e:	89 8b       	std	Y+17, r24	; 0x11
    1320:	89 89       	ldd	r24, Y+17	; 0x11
    1322:	9a 89       	ldd	r25, Y+18	; 0x12
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <main+0x6c0>
    1328:	9a 8b       	std	Y+18, r25	; 0x12
    132a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9c 8b       	std	Y+20, r25	; 0x14
    1334:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	8b 89       	ldd	r24, Y+19	; 0x13
    1338:	9c 89       	ldd	r25, Y+20	; 0x14
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <main+0x6b4>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <main+0x704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6d 89       	ldd	r22, Y+21	; 0x15
    1342:	7e 89       	ldd	r23, Y+22	; 0x16
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9c 8b       	std	Y+20, r25	; 0x14
    1352:	8b 8b       	std	Y+19, r24	; 0x13
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	98 8b       	std	Y+16, r25	; 0x10
    135a:	8f 87       	std	Y+15, r24	; 0x0f
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	98 89       	ldd	r25, Y+16	; 0x10
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <main+0x6fc>
    1364:	98 8b       	std	Y+16, r25	; 0x10
    1366:	8f 87       	std	Y+15, r24	; 0x0f

			received_pass_EEPROM = 1;

			uart_receive_password(check_pass_before_change);

			for(uint8 j =0; j<5;j++){
    1368:	8a ad       	ldd	r24, Y+58	; 0x3a
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	8a af       	std	Y+58, r24	; 0x3a
    136e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1370:	85 30       	cpi	r24, 0x05	; 5
    1372:	08 f4       	brcc	.+2      	; 0x1376 <main+0x712>
    1374:	64 cf       	rjmp	.-312    	; 0x123e <main+0x5da>
					check_change_received_pass_EEPROM = 0;
					_delay_ms(10);
				}
			}

			if(check_change_received_pass_EEPROM){
    1376:	80 91 6a 00 	lds	r24, 0x006A
    137a:	88 23       	and	r24, r24
    137c:	21 f0       	breq	.+8      	; 0x1386 <main+0x722>
				UART_sendByte(CORRECT_PASSWORD);
    137e:	8b e4       	ldi	r24, 0x4B	; 75
    1380:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
    1384:	2b cd       	rjmp	.-1450   	; 0xddc <main+0x178>
			}
			else{
				UART_sendByte(WRONG_PASSWORD);
    1386:	8c e4       	ldi	r24, 0x4C	; 76
    1388:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
				check_change_received_pass_EEPROM = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 6a 00 	sts	0x006A, r24
    1392:	24 cd       	rjmp	.-1464   	; 0xddc <main+0x178>
			 *
			 */

		case CHECK_FIRST_NEW_PASSWORD:

			uart_receive_password(receive_new_password_arrary1);
    1394:	ce 01       	movw	r24, r28
    1396:	87 5b       	subi	r24, 0xB7	; 183
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>

			check_received_new_pass_array1 = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	8d af       	std	Y+61, r24	; 0x3d

			UART_sendByte(check_received_new_pass_array1);
    13a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13a4:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
    13a8:	19 cd       	rjmp	.-1486   	; 0xddc <main+0x178>
			 * control ECU received it, then till HMI to move to next instruction
			 *
			 */
		case CHECK_SECONDE_NEW_PASSWORD:

			uart_receive_password(receive_new_password_arrary2);
    13aa:	ce 01       	movw	r24, r28
    13ac:	82 5b       	subi	r24, 0xB2	; 178
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	0e 94 c4 05 	call	0xb88	; 0xb88 <uart_receive_password>

			check_received_new_pass_array2 = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	8c af       	std	Y+60, r24	; 0x3c

			UART_sendByte(check_received_new_pass_array2);
    13b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    13ba:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
    13be:	0e cd       	rjmp	.-1508   	; 0xddc <main+0x178>
			 *
			 */

		case CHECK_TWO_NEW_PASSWORD_ARE_EQUAL :

			check_two_passwords(receive_new_password_arrary1,receive_new_password_arrary2,&two_new_paswwords_are_equal);
    13c0:	ce 01       	movw	r24, r28
    13c2:	87 5b       	subi	r24, 0xB7	; 183
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	9e 01       	movw	r18, r28
    13c8:	22 5b       	subi	r18, 0xB2	; 178
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	ae 01       	movw	r20, r28
    13ce:	4d 5a       	subi	r20, 0xAD	; 173
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <check_two_passwords>

			if(two_new_paswwords_are_equal){//1
    13d8:	fe 01       	movw	r30, r28
    13da:	ed 5a       	subi	r30, 0xAD	; 173
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <main+0x782>
    13e4:	90 c0       	rjmp	.+288    	; 0x1506 <main+0x8a2>

				UART_sendByte(MATCHED);
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>

				for(uint8 s=0; s<5;s++){
    13ec:	19 ae       	std	Y+57, r1	; 0x39
    13ee:	86 c0       	rjmp	.+268    	; 0x14fc <main+0x898>

					EEPROM_writeByte(s,receive_new_password_arrary1[s]);
    13f0:	89 ad       	ldd	r24, Y+57	; 0x39
    13f2:	48 2f       	mov	r20, r24
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	89 ad       	ldd	r24, Y+57	; 0x39
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ce 01       	movw	r24, r28
    13fe:	87 5b       	subi	r24, 0xB7	; 183
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	fc 01       	movw	r30, r24
    1404:	e2 0f       	add	r30, r18
    1406:	f3 1f       	adc	r31, r19
    1408:	20 81       	ld	r18, Z
    140a:	ca 01       	movw	r24, r20
    140c:	62 2f       	mov	r22, r18
    140e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <EEPROM_writeByte>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e2       	ldi	r26, 0x20	; 32
    1418:	b1 e4       	ldi	r27, 0x41	; 65
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <main+0x800>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <main+0x87e>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <main+0x86a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <main+0x860>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <main+0x84e>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <main+0x842>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <main+0x892>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <main+0x88a>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01

			if(two_new_paswwords_are_equal){//1

				UART_sendByte(MATCHED);

				for(uint8 s=0; s<5;s++){
    14f6:	89 ad       	ldd	r24, Y+57	; 0x39
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	89 af       	std	Y+57, r24	; 0x39
    14fc:	89 ad       	ldd	r24, Y+57	; 0x39
    14fe:	85 30       	cpi	r24, 0x05	; 5
    1500:	08 f4       	brcc	.+2      	; 0x1504 <main+0x8a0>
    1502:	76 cf       	rjmp	.-276    	; 0x13f0 <main+0x78c>
    1504:	6b cc       	rjmp	.-1834   	; 0xddc <main+0x178>

				}

			}
			else{//0
				UART_sendByte(NOT_MATCHED);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
    150c:	67 cc       	rjmp	.-1842   	; 0xddc <main+0x178>
			 *
			 */

		case ATTENTION_MODE:

			Timer1_init(&timer_config_control);
    150e:	ce 01       	movw	r24, r28
    1510:	85 5a       	subi	r24, 0xA5	; 165
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	0e 94 25 10 	call	0x204a	; 0x204a <Timer1_init>

			Timer1_setCallBack(motor_rotate_callback);/*call the function implemented when interrupt happened*/
    1518:	86 e2       	ldi	r24, 0x26	; 38
    151a:	96 e0       	ldi	r25, 0x06	; 6
    151c:	0e 94 86 10 	call	0x210c	; 0x210c <Timer1_setCallBack>
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <main+0x8c2>

			while(timer_motor_tick != 60){
				Buzzer_on();
    1522:	0e 94 af 0a 	call	0x155e	; 0x155e <Buzzer_on>

			Timer1_init(&timer_config_control);

			Timer1_setCallBack(motor_rotate_callback);/*call the function implemented when interrupt happened*/

			while(timer_motor_tick != 60){
    1526:	80 91 78 00 	lds	r24, 0x0078
    152a:	8c 33       	cpi	r24, 0x3C	; 60
    152c:	d1 f7       	brne	.-12     	; 0x1522 <main+0x8be>
				Buzzer_on();
			}
			Buzzer_off();
    152e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <Buzzer_off>
			timer_motor_tick = 0;
    1532:	10 92 78 00 	sts	0x0078, r1
			Timer1_deInit();
    1536:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Timer1_deInit>
    153a:	50 cc       	rjmp	.-1888   	; 0xddc <main+0x178>

0000153c <Buzzer_init>:
 *******************************************************************************/

#include "buzzer.h"
#include "gpio.h"

void Buzzer_init(){
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	64 e0       	ldi	r22, 0x04	; 4
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <Buzzer_on>:

void Buzzer_on(void){
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	64 e0       	ldi	r22, 0x04	; 4
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <Buzzer_off>:

void Buzzer_off(void){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	64 e0       	ldi	r22, 0x04	; 4
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <DcMotor_Init>:
// include the pwm.h file for used the function from it in DcMotor_Rotate function
#include "gpio.h"
#include "pwm_timer0.h"


void DcMotor_Init(void){
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62

	/*
	 * setup the two pins in the motor as output pins.
	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_OUTPUT);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_OUTPUT);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <GPIO_setupPinDirection>

	/*
	 * put the output of two pins is 0 to make a DC motor stop in the first.
	 */
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOGIC_LOW);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN2,LOGIC_LOW);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>

}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <DcMotor_Rotate>:
 * 1- first argument is state that represent that state of the motor stop or move.
 * 2- the second argument is
 * 3- check on the state of the motor that take it in main function and due to it
 * 	  will make a motor move in specific direction
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <DcMotor_Rotate+0x6>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	6a 83       	std	Y+2, r22	; 0x02

	// check the state of the motor to make it move in specific direction.
	if(state == Motor_Stop){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 23       	and	r24, r24
    15d6:	59 f4       	brne	.+22     	; 0x15ee <DcMotor_Rotate+0x2a>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOGIC_LOW);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN2,LOGIC_LOW);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <DcMotor_Rotate+0x60>
	}
	else if(state == Motor_CW){
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	59 f4       	brne	.+22     	; 0x160a <DcMotor_Rotate+0x46>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOGIC_LOW);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN2,LOGIC_HIGH);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <DcMotor_Rotate+0x60>
	}
	else if(state == Motor_A_CW){
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	51 f4       	brne	.+20     	; 0x1624 <DcMotor_Rotate+0x60>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN1,LOGIC_HIGH);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_PIN2,LOGIC_LOW);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 a6 0c 	call	0x194c	; 0x194c <GPIO_writePin>
	}

	// send the speed argument to PWM to make a motor move with the speed from PWM pin
	PWM_Timer0_Start(speed);
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <PWM_Timer0_Start>
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <EEPROM_writeByte+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <EEPROM_writeByte+0x8>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    I2C_start();
    1646:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    164a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	11 f0       	breq	.+4      	; 0x1656 <EEPROM_writeByte+0x22>
        return ERROR;
    1652:	1c 82       	std	Y+4, r1	; 0x04
    1654:	28 c0       	rjmp	.+80     	; 0x16a6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	80 70       	andi	r24, 0x00	; 0
    165c:	97 70       	andi	r25, 0x07	; 7
    165e:	88 0f       	add	r24, r24
    1660:	89 2f       	mov	r24, r25
    1662:	88 1f       	adc	r24, r24
    1664:	99 0b       	sbc	r25, r25
    1666:	91 95       	neg	r25
    1668:	80 6a       	ori	r24, 0xA0	; 160
    166a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    166e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    1672:	88 31       	cpi	r24, 0x18	; 24
    1674:	11 f0       	breq	.+4      	; 0x167a <EEPROM_writeByte+0x46>
        return ERROR; 
    1676:	1c 82       	std	Y+4, r1	; 0x04
    1678:	16 c0       	rjmp	.+44     	; 0x16a6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1680:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    1684:	88 32       	cpi	r24, 0x28	; 40
    1686:	11 f0       	breq	.+4      	; 0x168c <EEPROM_writeByte+0x58>
        return ERROR;
    1688:	1c 82       	std	Y+4, r1	; 0x04
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    I2C_writeByte(u8data);
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1692:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    1696:	88 32       	cpi	r24, 0x28	; 40
    1698:	11 f0       	breq	.+4      	; 0x169e <EEPROM_writeByte+0x6a>
        return ERROR;
    169a:	1c 82       	std	Y+4, r1	; 0x04
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    I2C_stop();
    169e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <I2C_stop>
	
    return SUCCESS;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8c 83       	std	Y+4, r24	; 0x04
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <EEPROM_readByte+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <EEPROM_readByte+0x8>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	7c 83       	std	Y+4, r23	; 0x04
    16ca:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	I2C_start();
    16cc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    16d0:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	11 f0       	breq	.+4      	; 0x16dc <EEPROM_readByte+0x26>
        return ERROR;
    16d8:	1d 82       	std	Y+5, r1	; 0x05
    16da:	44 c0       	rjmp	.+136    	; 0x1764 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	80 70       	andi	r24, 0x00	; 0
    16e2:	97 70       	andi	r25, 0x07	; 7
    16e4:	88 0f       	add	r24, r24
    16e6:	89 2f       	mov	r24, r25
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 0b       	sbc	r25, r25
    16ec:	91 95       	neg	r25
    16ee:	80 6a       	ori	r24, 0xA0	; 160
    16f0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    16f4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    16f8:	88 31       	cpi	r24, 0x18	; 24
    16fa:	11 f0       	breq	.+4      	; 0x1700 <EEPROM_readByte+0x4a>
        return ERROR;
    16fc:	1d 82       	std	Y+5, r1	; 0x05
    16fe:	32 c0       	rjmp	.+100    	; 0x1764 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1706:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    170a:	88 32       	cpi	r24, 0x28	; 40
    170c:	11 f0       	breq	.+4      	; 0x1712 <EEPROM_readByte+0x5c>
        return ERROR;
    170e:	1d 82       	std	Y+5, r1	; 0x05
    1710:	29 c0       	rjmp	.+82     	; 0x1764 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    I2C_start();
    1712:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <I2C_start>
    if (I2C_getStatus() != I2C_REP_START)
    1716:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    171a:	80 31       	cpi	r24, 0x10	; 16
    171c:	11 f0       	breq	.+4      	; 0x1722 <EEPROM_readByte+0x6c>
        return ERROR;
    171e:	1d 82       	std	Y+5, r1	; 0x05
    1720:	21 c0       	rjmp	.+66     	; 0x1764 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	80 70       	andi	r24, 0x00	; 0
    1728:	97 70       	andi	r25, 0x07	; 7
    172a:	88 0f       	add	r24, r24
    172c:	89 2f       	mov	r24, r25
    172e:	88 1f       	adc	r24, r24
    1730:	99 0b       	sbc	r25, r25
    1732:	91 95       	neg	r25
    1734:	81 6a       	ori	r24, 0xA1	; 161
    1736:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    173a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    173e:	80 34       	cpi	r24, 0x40	; 64
    1740:	11 f0       	breq	.+4      	; 0x1746 <EEPROM_readByte+0x90>
        return ERROR;
    1742:	1d 82       	std	Y+5, r1	; 0x05
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = I2C_readByteWithNACK();
    1746:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <I2C_readByteWithNACK>
    174a:	eb 81       	ldd	r30, Y+3	; 0x03
    174c:	fc 81       	ldd	r31, Y+4	; 0x04
    174e:	80 83       	st	Z, r24
    if (I2C_getStatus() != I2C_MR_DATA_NACK)
    1750:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <I2C_getStatus>
    1754:	88 35       	cpi	r24, 0x58	; 88
    1756:	11 f0       	breq	.+4      	; 0x175c <EEPROM_readByte+0xa6>
        return ERROR;
    1758:	1d 82       	std	Y+5, r1	; 0x05
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    I2C_stop();
    175c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <I2C_stop>

    return SUCCESS;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <GPIO_setupPinDirection+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <GPIO_setupPinDirection+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	6a 83       	std	Y+2, r22	; 0x02
    1788:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	08 f0       	brcs	.+2      	; 0x1792 <GPIO_setupPinDirection+0x1c>
    1790:	d5 c0       	rjmp	.+426    	; 0x193c <GPIO_setupPinDirection+0x1c6>
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	08 f0       	brcs	.+2      	; 0x179a <GPIO_setupPinDirection+0x24>
    1798:	d1 c0       	rjmp	.+418    	; 0x193c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3d 83       	std	Y+5, r19	; 0x05
    17a2:	2c 83       	std	Y+4, r18	; 0x04
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <GPIO_setupPinDirection+0x3a>
    17ae:	43 c0       	rjmp	.+134    	; 0x1836 <GPIO_setupPinDirection+0xc0>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <GPIO_setupPinDirection+0x4e>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	71 f0       	breq	.+28     	; 0x17de <GPIO_setupPinDirection+0x68>
    17c2:	bc c0       	rjmp	.+376    	; 0x193c <GPIO_setupPinDirection+0x1c6>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <GPIO_setupPinDirection+0x5a>
    17ce:	5f c0       	rjmp	.+190    	; 0x188e <GPIO_setupPinDirection+0x118>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <GPIO_setupPinDirection+0x66>
    17da:	85 c0       	rjmp	.+266    	; 0x18e6 <GPIO_setupPinDirection+0x170>
    17dc:	af c0       	rjmp	.+350    	; 0x193c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	a1 f4       	brne	.+40     	; 0x180c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17e4:	aa e3       	ldi	r26, 0x3A	; 58
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	ea e3       	ldi	r30, 0x3A	; 58
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <GPIO_setupPinDirection+0x8c>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <GPIO_setupPinDirection+0x88>
    1806:	84 2b       	or	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	98 c0       	rjmp	.+304    	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    180c:	aa e3       	ldi	r26, 0x3A	; 58
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ea e3       	ldi	r30, 0x3A	; 58
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <GPIO_setupPinDirection+0xb4>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <GPIO_setupPinDirection+0xb0>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	83 c0       	rjmp	.+262    	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	a1 f4       	brne	.+40     	; 0x1864 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    183c:	a7 e3       	ldi	r26, 0x37	; 55
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e7 e3       	ldi	r30, 0x37	; 55
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <GPIO_setupPinDirection+0xe4>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <GPIO_setupPinDirection+0xe0>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	6c c0       	rjmp	.+216    	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1864:	a7 e3       	ldi	r26, 0x37	; 55
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e7 e3       	ldi	r30, 0x37	; 55
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <GPIO_setupPinDirection+0x10c>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <GPIO_setupPinDirection+0x108>
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	57 c0       	rjmp	.+174    	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1894:	a4 e3       	ldi	r26, 0x34	; 52
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e4 e3       	ldi	r30, 0x34	; 52
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0x13c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0x138>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	40 c0       	rjmp	.+128    	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18bc:	a4 e3       	ldi	r26, 0x34	; 52
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e4 e3       	ldi	r30, 0x34	; 52
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_setupPinDirection+0x164>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_setupPinDirection+0x160>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	2b c0       	rjmp	.+86     	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18ec:	a1 e3       	ldi	r26, 0x31	; 49
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e1 e3       	ldi	r30, 0x31	; 49
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0x194>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0x190>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	14 c0       	rjmp	.+40     	; 0x193c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1914:	a1 e3       	ldi	r26, 0x31	; 49
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e1 e3       	ldi	r30, 0x31	; 49
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_setupPinDirection+0x1bc>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_setupPinDirection+0x1b8>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <GPIO_writePin+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <GPIO_writePin+0x8>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	6a 83       	std	Y+2, r22	; 0x02
    195e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	88 30       	cpi	r24, 0x08	; 8
    1964:	08 f0       	brcs	.+2      	; 0x1968 <GPIO_writePin+0x1c>
    1966:	d5 c0       	rjmp	.+426    	; 0x1b12 <GPIO_writePin+0x1c6>
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	08 f0       	brcs	.+2      	; 0x1970 <GPIO_writePin+0x24>
    196e:	d1 c0       	rjmp	.+418    	; 0x1b12 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3d 83       	std	Y+5, r19	; 0x05
    1978:	2c 83       	std	Y+4, r18	; 0x04
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <GPIO_writePin+0x3a>
    1984:	43 c0       	rjmp	.+134    	; 0x1a0c <GPIO_writePin+0xc0>
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	3d 81       	ldd	r19, Y+5	; 0x05
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <GPIO_writePin+0x4e>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	71 f0       	breq	.+28     	; 0x19b4 <GPIO_writePin+0x68>
    1998:	bc c0       	rjmp	.+376    	; 0x1b12 <GPIO_writePin+0x1c6>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <GPIO_writePin+0x5a>
    19a4:	5f c0       	rjmp	.+190    	; 0x1a64 <GPIO_writePin+0x118>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <GPIO_writePin+0x66>
    19b0:	85 c0       	rjmp	.+266    	; 0x1abc <GPIO_writePin+0x170>
    19b2:	af c0       	rjmp	.+350    	; 0x1b12 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	a1 f4       	brne	.+40     	; 0x19e2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19ba:	ab e3       	ldi	r26, 0x3B	; 59
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	eb e3       	ldi	r30, 0x3B	; 59
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_writePin+0x8c>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_writePin+0x88>
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	98 c0       	rjmp	.+304    	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19e2:	ab e3       	ldi	r26, 0x3B	; 59
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	eb e3       	ldi	r30, 0x3B	; 59
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_writePin+0xb4>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_writePin+0xb0>
    1a04:	80 95       	com	r24
    1a06:	84 23       	and	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	83 c0       	rjmp	.+262    	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a12:	a8 e3       	ldi	r26, 0x38	; 56
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_writePin+0xe4>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_writePin+0xe0>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	6c c0       	rjmp	.+216    	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a3a:	a8 e3       	ldi	r26, 0x38	; 56
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e8 e3       	ldi	r30, 0x38	; 56
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <GPIO_writePin+0x10c>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <GPIO_writePin+0x108>
    1a5c:	80 95       	com	r24
    1a5e:	84 23       	and	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	57 c0       	rjmp	.+174    	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	a1 f4       	brne	.+40     	; 0x1a92 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a6a:	a5 e3       	ldi	r26, 0x35	; 53
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e5 e3       	ldi	r30, 0x35	; 53
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_writePin+0x13c>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_writePin+0x138>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	40 c0       	rjmp	.+128    	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a92:	a5 e3       	ldi	r26, 0x35	; 53
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e3       	ldi	r30, 0x35	; 53
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GPIO_writePin+0x164>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GPIO_writePin+0x160>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	2b c0       	rjmp	.+86     	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a1 f4       	brne	.+40     	; 0x1aea <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_writePin+0x194>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_writePin+0x190>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1aea:	a2 e3       	ldi	r26, 0x32	; 50
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e2 e3       	ldi	r30, 0x32	; 50
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_writePin+0x1bc>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_writePin+0x1b8>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <GPIO_readPin+0x6>
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <GPIO_readPin+0x8>
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    1b32:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b34:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 30       	cpi	r24, 0x08	; 8
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <GPIO_readPin+0x1c>
    1b3c:	84 c0       	rjmp	.+264    	; 0x1c46 <GPIO_readPin+0x124>
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	84 30       	cpi	r24, 0x04	; 4
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <GPIO_readPin+0x24>
    1b44:	80 c0       	rjmp	.+256    	; 0x1c46 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3d 83       	std	Y+5, r19	; 0x05
    1b4e:	2c 83       	std	Y+4, r18	; 0x04
    1b50:	4c 81       	ldd	r20, Y+4	; 0x04
    1b52:	5d 81       	ldd	r21, Y+5	; 0x05
    1b54:	41 30       	cpi	r20, 0x01	; 1
    1b56:	51 05       	cpc	r21, r1
    1b58:	79 f1       	breq	.+94     	; 0x1bb8 <GPIO_readPin+0x96>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	91 05       	cpc	r25, r1
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <GPIO_readPin+0x4e>
    1b64:	2c 81       	ldd	r18, Y+4	; 0x04
    1b66:	3d 81       	ldd	r19, Y+5	; 0x05
    1b68:	21 15       	cp	r18, r1
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	69 f0       	breq	.+26     	; 0x1b88 <GPIO_readPin+0x66>
    1b6e:	6b c0       	rjmp	.+214    	; 0x1c46 <GPIO_readPin+0x124>
    1b70:	4c 81       	ldd	r20, Y+4	; 0x04
    1b72:	5d 81       	ldd	r21, Y+5	; 0x05
    1b74:	42 30       	cpi	r20, 0x02	; 2
    1b76:	51 05       	cpc	r21, r1
    1b78:	b9 f1       	breq	.+110    	; 0x1be8 <GPIO_readPin+0xc6>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	83 30       	cpi	r24, 0x03	; 3
    1b80:	91 05       	cpc	r25, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <GPIO_readPin+0x64>
    1b84:	49 c0       	rjmp	.+146    	; 0x1c18 <GPIO_readPin+0xf6>
    1b86:	5f c0       	rjmp	.+190    	; 0x1c46 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b88:	e9 e3       	ldi	r30, 0x39	; 57
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a9 01       	movw	r20, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <GPIO_readPin+0x7e>
    1b9c:	55 95       	asr	r21
    1b9e:	47 95       	ror	r20
    1ba0:	8a 95       	dec	r24
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <GPIO_readPin+0x7a>
    1ba4:	ca 01       	movw	r24, r20
    1ba6:	81 70       	andi	r24, 0x01	; 1
    1ba8:	90 70       	andi	r25, 0x00	; 0
    1baa:	88 23       	and	r24, r24
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	49 c0       	rjmp	.+146    	; 0x1c46 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
    1bb6:	47 c0       	rjmp	.+142    	; 0x1c46 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bb8:	e6 e3       	ldi	r30, 0x36	; 54
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a9 01       	movw	r20, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <GPIO_readPin+0xae>
    1bcc:	55 95       	asr	r21
    1bce:	47 95       	ror	r20
    1bd0:	8a 95       	dec	r24
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <GPIO_readPin+0xaa>
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	81 70       	andi	r24, 0x01	; 1
    1bd8:	90 70       	andi	r25, 0x00	; 0
    1bda:	88 23       	and	r24, r24
    1bdc:	19 f0       	breq	.+6      	; 0x1be4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	31 c0       	rjmp	.+98     	; 0x1c46 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1be4:	19 82       	std	Y+1, r1	; 0x01
    1be6:	2f c0       	rjmp	.+94     	; 0x1c46 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1be8:	e3 e3       	ldi	r30, 0x33	; 51
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_readPin+0xde>
    1bfc:	55 95       	asr	r21
    1bfe:	47 95       	ror	r20
    1c00:	8a 95       	dec	r24
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_readPin+0xda>
    1c04:	ca 01       	movw	r24, r20
    1c06:	81 70       	andi	r24, 0x01	; 1
    1c08:	90 70       	andi	r25, 0x00	; 0
    1c0a:	88 23       	and	r24, r24
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	19 c0       	rjmp	.+50     	; 0x1c46 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	17 c0       	rjmp	.+46     	; 0x1c46 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c18:	e0 e3       	ldi	r30, 0x30	; 48
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_readPin+0x10e>
    1c2c:	55 95       	asr	r21
    1c2e:	47 95       	ror	r20
    1c30:	8a 95       	dec	r24
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_readPin+0x10a>
    1c34:	ca 01       	movw	r24, r20
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	90 70       	andi	r25, 0x00	; 0
    1c3a:	88 23       	and	r24, r24
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c44:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_setupPortDirection+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_setupPortDirection+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	90 f5       	brcc	.+100    	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 83       	std	Y+4, r19	; 0x04
    1c76:	2b 83       	std	Y+3, r18	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	d1 f0       	breq	.+52     	; 0x1cb6 <GPIO_setupPortDirection+0x5e>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <GPIO_setupPortDirection+0x3e>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <GPIO_setupPortDirection+0x54>
    1c94:	1e c0       	rjmp	.+60     	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_setupPortDirection+0x68>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <GPIO_setupPortDirection+0x72>
    1caa:	13 c0       	rjmp	.+38     	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cac:	ea e3       	ldi	r30, 0x3A	; 58
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cb6:	e7 e3       	ldi	r30, 0x37	; 55
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cc0:	e4 e3       	ldi	r30, 0x34	; 52
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <GPIO_writePort+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_writePort+0x8>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	90 f5       	brcc	.+100    	; 0x1d5a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3c 83       	std	Y+4, r19	; 0x04
    1cfe:	2b 83       	std	Y+3, r18	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	d1 f0       	breq	.+52     	; 0x1d3e <GPIO_writePort+0x5e>
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <GPIO_writePort+0x3e>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <GPIO_writePort+0x54>
    1d1c:	1e c0       	rjmp	.+60     	; 0x1d5a <GPIO_writePort+0x7a>
    1d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d20:	3c 81       	ldd	r19, Y+4	; 0x04
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <GPIO_writePort+0x68>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <GPIO_writePort+0x72>
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d34:	eb e3       	ldi	r30, 0x3B	; 59
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 83       	st	Z, r24
    1d3c:	0e c0       	rjmp	.+28     	; 0x1d5a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d3e:	e8 e3       	ldi	r30, 0x38	; 56
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d48:	e5 e3       	ldi	r30, 0x35	; 53
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	80 83       	st	Z, r24
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d52:	e2 e3       	ldi	r30, 0x32	; 50
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <GPIO_readPort+0x6>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <GPIO_readPort+0x8>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d76:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	84 30       	cpi	r24, 0x04	; 4
    1d7c:	90 f5       	brcc	.+100    	; 0x1de2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3c 83       	std	Y+4, r19	; 0x04
    1d86:	2b 83       	std	Y+3, r18	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	d1 f0       	breq	.+52     	; 0x1dc6 <GPIO_readPort+0x5e>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <GPIO_readPort+0x3e>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <GPIO_readPort+0x54>
    1da4:	1e c0       	rjmp	.+60     	; 0x1de2 <GPIO_readPort+0x7a>
    1da6:	2b 81       	ldd	r18, Y+3	; 0x03
    1da8:	3c 81       	ldd	r19, Y+4	; 0x04
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <GPIO_readPort+0x68>
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <GPIO_readPort+0x72>
    1dba:	13 c0       	rjmp	.+38     	; 0x1de2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dbc:	e9 e3       	ldi	r30, 0x39	; 57
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	0e c0       	rjmp	.+28     	; 0x1de2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1dc6:	e6 e3       	ldi	r30, 0x36	; 54
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dd0:	e3 e3       	ldi	r30, 0x33	; 51
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dda:	e0 e3       	ldi	r30, 0x30	; 48
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <I2C_init>:
 * 	  enters to left by 1
 * 4- finally, enables TWI operation and activates the TWI interface by but bit
 * 	  TWEN in register TWCR = 1.
 *
 */
void I2C_init(const TWI_ConfigType * Config_Ptr){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <I2C_init+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01

	// setup the bit rate in register TWBR
	TWBR = (Config_Ptr->bit_rate);
    1e00:	a0 e2       	ldi	r26, 0x20	; 32
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	81 81       	ldd	r24, Z+1	; 0x01
    1e0a:	8c 93       	st	X, r24

	// using prescalar 1
	TWSR = 0x00;
    1e0c:	e1 e2       	ldi	r30, 0x21	; 33
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	10 82       	st	Z, r1

	// put the slave address in
	TWAR = ((Config_Ptr->address) << 1);
    1e12:	a2 e2       	ldi	r26, 0x22	; 34
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e9 81       	ldd	r30, Y+1	; 0x01
    1e18:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 0f       	add	r24, r24
    1e1e:	8c 93       	st	X, r24

	// Finally,Enable TWI Interface
    TWCR |= (1<<TWEN);
    1e20:	a6 e5       	ldi	r26, 0x56	; 86
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e5       	ldi	r30, 0x56	; 86
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	84 60       	ori	r24, 0x04	; 4
    1e2c:	8c 93       	st	X, r24
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <I2C_start>:

void I2C_start(void)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1e40:	e6 e5       	ldi	r30, 0x56	; 86
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	84 ea       	ldi	r24, 0xA4	; 164
    1e46:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e48:	e6 e5       	ldi	r30, 0x56	; 86
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 23       	and	r24, r24
    1e50:	dc f7       	brge	.-10     	; 0x1e48 <I2C_start+0x10>
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <I2C_stop>:

void I2C_stop(void)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e60:	e6 e5       	ldi	r30, 0x56	; 86
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	84 e9       	ldi	r24, 0x94	; 148
    1e66:	80 83       	st	Z, r24
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <I2C_writeByte>:

void I2C_writeByte(uint8 data)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e7a:	e3 e2       	ldi	r30, 0x23	; 35
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e82:	e6 e5       	ldi	r30, 0x56	; 86
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	84 e8       	ldi	r24, 0x84	; 132
    1e88:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e8a:	e6 e5       	ldi	r30, 0x56	; 86
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 23       	and	r24, r24
    1e92:	dc f7       	brge	.-10     	; 0x1e8a <I2C_writeByte+0x1c>
}
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <I2C_readByteWithACK>:

uint8 I2C_readByteWithACK(void)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ea4:	e6 e5       	ldi	r30, 0x56	; 86
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	84 ec       	ldi	r24, 0xC4	; 196
    1eaa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1eac:	e6 e5       	ldi	r30, 0x56	; 86
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 23       	and	r24, r24
    1eb4:	dc f7       	brge	.-10     	; 0x1eac <I2C_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1eb6:	e3 e2       	ldi	r30, 0x23	; 35
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <I2C_readByteWithNACK>:

uint8 I2C_readByteWithNACK(void)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1eca:	e6 e5       	ldi	r30, 0x56	; 86
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	84 e8       	ldi	r24, 0x84	; 132
    1ed0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ed2:	e6 e5       	ldi	r30, 0x56	; 86
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 23       	and	r24, r24
    1eda:	dc f7       	brge	.-10     	; 0x1ed2 <I2C_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1edc:	e3 e2       	ldi	r30, 0x23	; 35
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <I2C_getStatus>:

uint8 I2C_getStatus(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ef2:	e1 e2       	ldi	r30, 0x21	; 33
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 7f       	andi	r24, 0xF8	; 248
    1efa:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <PWM_Timer0_Start>:
 * 3- store that duty_cycle in OCR0 register.
 * 4- put the pin 3 in portB as output pin for get output value from it.
 * 5- enable the compare match mode and FAST PWM mode then choose prescaler.
 *
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    1f12:	e2 e5       	ldi	r30, 0x52	; 82
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	10 82       	st	Z, r1
	// if the input is 0 the result value on the pin is zero
	if(duty_cycle == 0){
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	88 23       	and	r24, r24
    1f1c:	21 f4       	brne	.+8      	; 0x1f26 <PWM_Timer0_Start+0x20>
		OCR0 = 0;
    1f1e:	ec e5       	ldi	r30, 0x5C	; 92
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	10 82       	st	Z, r1
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <PWM_Timer0_Start+0x5e>
	}
	// if the input is 25 the result value on the pin is (1/4) of max value (255)
	else if(duty_cycle == 25){
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	89 31       	cpi	r24, 0x19	; 25
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <PWM_Timer0_Start+0x30>
		OCR0 = (25/100.0)*255;
    1f2c:	ec e5       	ldi	r30, 0x5C	; 92
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8f e3       	ldi	r24, 0x3F	; 63
    1f32:	80 83       	st	Z, r24
    1f34:	17 c0       	rjmp	.+46     	; 0x1f64 <PWM_Timer0_Start+0x5e>
	}
	// if the input is 25 the result value on the pin is (1/2) of max value (255)
	else if(duty_cycle == 50){
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	82 33       	cpi	r24, 0x32	; 50
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <PWM_Timer0_Start+0x40>
		OCR0 = (50/100.0)*255;
    1f3c:	ec e5       	ldi	r30, 0x5C	; 92
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8f e7       	ldi	r24, 0x7F	; 127
    1f42:	80 83       	st	Z, r24
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <PWM_Timer0_Start+0x5e>
	}
	// if the input is 25 the result value on the pin is (3/4) of max value (255)
	else if(duty_cycle == 75){
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8b 34       	cpi	r24, 0x4B	; 75
    1f4a:	29 f4       	brne	.+10     	; 0x1f56 <PWM_Timer0_Start+0x50>
		OCR0 = (75/100.0)*255;
    1f4c:	ec e5       	ldi	r30, 0x5C	; 92
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8f eb       	ldi	r24, 0xBF	; 191
    1f52:	80 83       	st	Z, r24
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <PWM_Timer0_Start+0x5e>
	}
	// if the input is 25 the result value on the pin is the max value (255)
	else if(duty_cycle == 100){
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	84 36       	cpi	r24, 0x64	; 100
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <PWM_Timer0_Start+0x5e>
		OCR0 = (100/100.0)*255;
    1f5c:	ec e5       	ldi	r30, 0x5C	; 92
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	80 83       	st	Z, r24
	}
	GPIO_setupPinDirection(TIMER0_PWM_PORT,TIMER0_PWM_PIN,PIN_OUTPUT);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	63 e0       	ldi	r22, 0x03	; 3
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM00) | (1<<COM01) | (1<<WGM01)|(1<<CS01);
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8a e6       	ldi	r24, 0x6A	; 106
    1f74:	80 83       	st	Z, r24
}
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <__vector_9>:
/*
 * This is the ISR of the normal mode when the overflow occur the interrupt will
 * happen and then will jump to this ISR in vector table to implement it
 *
 */
ISR (TIMER1_OVF_vect){
    1f7e:	1f 92       	push	r1
    1f80:	0f 92       	push	r0
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	0f 92       	push	r0
    1f86:	11 24       	eor	r1, r1
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62

	if(ptr_callback != NULL_PTR){
    1fa8:	80 91 79 00 	lds	r24, 0x0079
    1fac:	90 91 7a 00 	lds	r25, 0x007A
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__vector_9+0x40>
		(*ptr_callback) ();
    1fb4:	e0 91 79 00 	lds	r30, 0x0079
    1fb8:	f0 91 7a 00 	lds	r31, 0x007A
    1fbc:	09 95       	icall
	}
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <__vector_7>:
 * This is the ISR of the compare mode when the overflow occur the interrupt will
 * happen and then will jump to this ISR in vector table to implement it
 *
 */

ISR (TIMER1_COMPA_vect){
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62

	if(ptr_callback != NULL_PTR){
    200e:	80 91 79 00 	lds	r24, 0x0079
    2012:	90 91 7a 00 	lds	r25, 0x007A
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	29 f0       	breq	.+10     	; 0x2024 <__vector_7+0x40>
			(*ptr_callback) ();
    201a:	e0 91 79 00 	lds	r30, 0x0079
    201e:	f0 91 7a 00 	lds	r31, 0x007A
    2022:	09 95       	icall
		}
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	bf 91       	pop	r27
    202e:	af 91       	pop	r26
    2030:	9f 91       	pop	r25
    2032:	8f 91       	pop	r24
    2034:	7f 91       	pop	r23
    2036:	6f 91       	pop	r22
    2038:	5f 91       	pop	r21
    203a:	4f 91       	pop	r20
    203c:	3f 91       	pop	r19
    203e:	2f 91       	pop	r18
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <Timer1_init>:
 * 3- check if the mode is compare then modify the timer1 for work in compare mode
 * 4- any thing else modify the timer1 in normal mode (overflow mode)
 *
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <Timer1_init+0x6>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * First put the initial value of the timer in TCNT1 by the user zero or any
	 * value
	 *
	 */
	TCNT1 = Config_Ptr->initial_value;
    2058:	ac e4       	ldi	r26, 0x4C	; 76
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	11 96       	adiw	r26, 0x01	; 1
    2066:	9c 93       	st	X, r25
    2068:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == Compare_Mode){
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	85 81       	ldd	r24, Z+5	; 0x05
    2070:	84 30       	cpi	r24, 0x04	; 4
    2072:	21 f5       	brne	.+72     	; 0x20bc <Timer1_init+0x72>

		// This pin set to 1 in any mode not PWM
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2074:	ef e4       	ldi	r30, 0x4F	; 79
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8c e0       	ldi	r24, 0x0C	; 12
    207a:	80 83       	st	Z, r24
		 *
		 * 2- Then modify the mode of the register to work in compare mode by choose
		 * 	   mode 4 from timer1 (in data sheet) so to put pin WGM12 take the compare
		 * 	   value mode from enum and shift it to left by 1.
		 */
		TCCR1B = ((Config_Ptr->prescaler)) | ((Config_Ptr->mode) << 1);
    207c:	ae e4       	ldi	r26, 0x4E	; 78
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e9 81       	ldd	r30, Y+1	; 0x01
    2082:	fa 81       	ldd	r31, Y+2	; 0x02
    2084:	84 81       	ldd	r24, Z+4	; 0x04
    2086:	28 2f       	mov	r18, r24
    2088:	e9 81       	ldd	r30, Y+1	; 0x01
    208a:	fa 81       	ldd	r31, Y+2	; 0x02
    208c:	85 81       	ldd	r24, Z+5	; 0x05
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	82 2b       	or	r24, r18
    2098:	8c 93       	st	X, r24

		// Enable Output Compare A Match Interrupt
		TIMSK |= (1<<OCIE1A);
    209a:	a9 e5       	ldi	r26, 0x59	; 89
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e9 e5       	ldi	r30, 0x59	; 89
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 61       	ori	r24, 0x10	; 16
    20a6:	8c 93       	st	X, r24

		/*
		 * put the compare value that need timer count to it.
		 *
		 */
		OCR1A = Config_Ptr->compare_value;
    20a8:	aa e4       	ldi	r26, 0x4A	; 74
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
    20ba:	11 c0       	rjmp	.+34     	; 0x20de <Timer1_init+0x94>

	}
	else{

		// This pin set to 1 in any mode not PWM
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    20bc:	ef e4       	ldi	r30, 0x4F	; 79
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	8c e0       	ldi	r24, 0x0C	; 12
    20c2:	80 83       	st	Z, r24
		 *    this made by do AND operation for the value with 0x07 to take first
		 *    three bits in it is value.
		 *
		 * 3- for normal mode we do not need to enable any other bits in this register
		 */
		TCCR1B = ((Config_Ptr->prescaler));
    20c4:	ae e4       	ldi	r26, 0x4E	; 78
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ca:	fa 81       	ldd	r31, Y+2	; 0x02
    20cc:	84 81       	ldd	r24, Z+4	; 0x04
    20ce:	8c 93       	st	X, r24

		// Enable Overflow Interrupt
		TIMSK |= (1<<TOIE1);
    20d0:	a9 e5       	ldi	r26, 0x59	; 89
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e9 e5       	ldi	r30, 0x59	; 89
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	84 60       	ori	r24, 0x04	; 4
    20dc:	8c 93       	st	X, r24
	}
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Timer1_deInit>:
 *
 * this function for stop the timer1 and reset the value in TCNT1.
 *
 */

void Timer1_deInit(void){
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62

	/*
	 * put TCNT1 = 0 for reset the value in it and start again from 0 when initialized
	 */
	TCNT1  = 0;
    20f0:	ec e4       	ldi	r30, 0x4C	; 76
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	11 82       	std	Z+1, r1	; 0x01
    20f6:	10 82       	st	Z, r1

	/*
	 * put TCCR1B = 0 for preventing the clock from the timer1 (No Clock)
	 */
	TCCR1B = 0;
    20f8:	ee e4       	ldi	r30, 0x4E	; 78
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	10 82       	st	Z, r1
	/*
	 * reset the global variable pointer that include the callback function address
	 * reset it to null again
	 *
	 */
	ptr_callback = NULL_PTR;
    20fe:	10 92 7a 00 	sts	0x007A, r1
    2102:	10 92 79 00 	sts	0x0079, r1
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <Timer1_setCallBack>:
 *
 * this is the callback function will  called when interrupt happen by it is pointer
 *
 */

void Timer1_setCallBack(void(*a_ptr)(void)){
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <Timer1_setCallBack+0x6>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01

	ptr_callback = a_ptr;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	90 93 7a 00 	sts	0x007A, r25
    2122:	80 93 79 00 	sts	0x0079, r24

}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <UART_init>:
 *  4- Modify the Baud Rate equation.
 *	5- setup the UBRRH and UBRRL values.
 *
 */

void UART_init(const UART_ConfigType *Config_Ptr){
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <UART_init+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <UART_init+0x8>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value=0;
    2140:	1a 82       	std	Y+2, r1	; 0x02
    2142:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<< U2X);
    2144:	eb e2       	ldi	r30, 0x2B	; 43
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    214c:	ea e2       	ldi	r30, 0x2A	; 42
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	88 e1       	ldi	r24, 0x18	; 24
    2152:	80 83       	st	Z, r24
	 * UCSRC will set to 1, but if the number of bits equal to 9 bits the 2 bits
	 * UCSZ0 and UCSZ1 in register UCSRC will set to 1 and the bit UCSZ2 in register
	 * UCSZ2 will set to 1 else, so this if important for configuration.
	 */

	if(Config_Ptr->bit_data == Frame_9_bit){
    2154:	eb 81       	ldd	r30, Y+3	; 0x03
    2156:	fc 81       	ldd	r31, Y+4	; 0x04
    2158:	80 81       	ld	r24, Z
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	91 f5       	brne	.+100    	; 0x21c2 <UART_init+0x92>

		UCSRC = (1<<URSEL) | ( ( (Config_Ptr->parity) & 0x03) <<4)
    215e:	a0 e4       	ldi	r26, 0x40	; 64
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb 81       	ldd	r30, Y+3	; 0x03
    2164:	fc 81       	ldd	r31, Y+4	; 0x04
    2166:	81 81       	ldd	r24, Z+1	; 0x01
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	83 70       	andi	r24, 0x03	; 3
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	82 95       	swap	r24
    2172:	92 95       	swap	r25
    2174:	90 7f       	andi	r25, 0xF0	; 240
    2176:	98 27       	eor	r25, r24
    2178:	80 7f       	andi	r24, 0xF0	; 240
    217a:	98 27       	eor	r25, r24
    217c:	28 2f       	mov	r18, r24
    217e:	20 68       	ori	r18, 0x80	; 128
    2180:	eb 81       	ldd	r30, Y+3	; 0x03
    2182:	fc 81       	ldd	r31, Y+4	; 0x04
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	81 70       	andi	r24, 0x01	; 1
    218c:	90 70       	andi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	28 2b       	or	r18, r24
    219c:	eb 81       	ldd	r30, Y+3	; 0x03
    219e:	fc 81       	ldd	r31, Y+4	; 0x04
    21a0:	80 81       	ld	r24, Z
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	83 70       	andi	r24, 0x03	; 3
    21a8:	90 70       	andi	r25, 0x00	; 0
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	82 2b       	or	r24, r18
    21b0:	8c 93       	st	X, r24
							 | ( ( (Config_Ptr->stop_bit) & 0x01) <<3)
							 | ( ( (Config_Ptr->bit_data) & 0X03) <<1);

		UCSRB |= (1<< UCSZ2);
    21b2:	aa e2       	ldi	r26, 0x2A	; 42
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ea e2       	ldi	r30, 0x2A	; 42
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	84 60       	ori	r24, 0x04	; 4
    21be:	8c 93       	st	X, r24
    21c0:	2a c0       	rjmp	.+84     	; 0x2216 <UART_init+0xe6>

	}
	else{
		UCSRC = (1<<URSEL) | ( ( (Config_Ptr->parity) & 0x03) <<4)
    21c2:	a0 e4       	ldi	r26, 0x40	; 64
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	eb 81       	ldd	r30, Y+3	; 0x03
    21c8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ca:	81 81       	ldd	r24, Z+1	; 0x01
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	83 70       	andi	r24, 0x03	; 3
    21d2:	90 70       	andi	r25, 0x00	; 0
    21d4:	82 95       	swap	r24
    21d6:	92 95       	swap	r25
    21d8:	90 7f       	andi	r25, 0xF0	; 240
    21da:	98 27       	eor	r25, r24
    21dc:	80 7f       	andi	r24, 0xF0	; 240
    21de:	98 27       	eor	r25, r24
    21e0:	28 2f       	mov	r18, r24
    21e2:	20 68       	ori	r18, 0x80	; 128
    21e4:	eb 81       	ldd	r30, Y+3	; 0x03
    21e6:	fc 81       	ldd	r31, Y+4	; 0x04
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	81 70       	andi	r24, 0x01	; 1
    21f0:	90 70       	andi	r25, 0x00	; 0
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	28 2b       	or	r18, r24
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	80 81       	ld	r24, Z
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	83 70       	andi	r24, 0x03	; 3
    220c:	90 70       	andi	r25, 0x00	; 0
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	82 2b       	or	r24, r18
    2214:	8c 93       	st	X, r24
									 | ( ( (Config_Ptr->stop_bit) & 0x01) <<3)
									 | ( ( (Config_Ptr->bit_data) & 0X03) <<1);
	}

	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2216:	eb 81       	ldd	r30, Y+3	; 0x03
    2218:	fc 81       	ldd	r31, Y+4	; 0x04
    221a:	83 81       	ldd	r24, Z+3	; 0x03
    221c:	94 81       	ldd	r25, Z+4	; 0x04
    221e:	a5 81       	ldd	r26, Z+5	; 0x05
    2220:	b6 81       	ldd	r27, Z+6	; 0x06
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	aa 1f       	adc	r26, r26
    2228:	bb 1f       	adc	r27, r27
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	aa 1f       	adc	r26, r26
    2230:	bb 1f       	adc	r27, r27
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	aa 1f       	adc	r26, r26
    2238:	bb 1f       	adc	r27, r27
    223a:	9c 01       	movw	r18, r24
    223c:	ad 01       	movw	r20, r26
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	92 e1       	ldi	r25, 0x12	; 18
    2242:	aa e7       	ldi	r26, 0x7A	; 122
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodsi4>
    224e:	da 01       	movw	r26, r20
    2250:	c9 01       	movw	r24, r18
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value >>8;
    2258:	e0 e4       	ldi	r30, 0x40	; 64
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	89 2f       	mov	r24, r25
    2262:	99 27       	eor	r25, r25
    2264:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2266:	e9 e2       	ldi	r30, 0x29	; 41
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 83       	st	Z, r24
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	0f 92       	push	r0
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2288:	eb e2       	ldi	r30, 0x2B	; 43
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	80 72       	andi	r24, 0x20	; 32
    2294:	90 70       	andi	r25, 0x00	; 0
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	b9 f3       	breq	.-18     	; 0x2288 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    229a:	ec e2       	ldi	r30, 0x2C	; 44
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22b2:	eb e2       	ldi	r30, 0x2B	; 43
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 23       	and	r24, r24
    22ba:	dc f7       	brge	.-10     	; 0x22b2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    22bc:	ec e2       	ldi	r30, 0x2C	; 44
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <UART_sendString+0x6>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22d8:	19 82       	std	Y+1, r1	; 0x01
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	80 81       	ld	r24, Z
    22ee:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		i++;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	fc 01       	movw	r30, r24
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 81       	ld	r24, Z
    230a:	88 23       	and	r24, r24
    230c:	39 f7       	brne	.-50     	; 0x22dc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <UART_receiveString+0xa>
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9b 83       	std	Y+3, r25	; 0x03
    232c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    232e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	8c 01       	movw	r16, r24
    233c:	02 0f       	add	r16, r18
    233e:	13 1f       	adc	r17, r19
    2340:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
    2344:	f8 01       	movw	r30, r16
    2346:	80 83       	st	Z, r24
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	8c 01       	movw	r16, r24
    235c:	02 0f       	add	r16, r18
    235e:	13 1f       	adc	r17, r19
    2360:	0e 94 55 11 	call	0x22aa	; 0x22aa <UART_recieveByte>
    2364:	f8 01       	movw	r30, r16
    2366:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	80 81       	ld	r24, Z
    237a:	83 32       	cpi	r24, 0x23	; 35
    237c:	31 f7       	brne	.-52     	; 0x234a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	10 82       	st	Z, r1
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <__udivmodsi4>:
    23a0:	a1 e2       	ldi	r26, 0x21	; 33
    23a2:	1a 2e       	mov	r1, r26
    23a4:	aa 1b       	sub	r26, r26
    23a6:	bb 1b       	sub	r27, r27
    23a8:	fd 01       	movw	r30, r26
    23aa:	0d c0       	rjmp	.+26     	; 0x23c6 <__udivmodsi4_ep>

000023ac <__udivmodsi4_loop>:
    23ac:	aa 1f       	adc	r26, r26
    23ae:	bb 1f       	adc	r27, r27
    23b0:	ee 1f       	adc	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	a2 17       	cp	r26, r18
    23b6:	b3 07       	cpc	r27, r19
    23b8:	e4 07       	cpc	r30, r20
    23ba:	f5 07       	cpc	r31, r21
    23bc:	20 f0       	brcs	.+8      	; 0x23c6 <__udivmodsi4_ep>
    23be:	a2 1b       	sub	r26, r18
    23c0:	b3 0b       	sbc	r27, r19
    23c2:	e4 0b       	sbc	r30, r20
    23c4:	f5 0b       	sbc	r31, r21

000023c6 <__udivmodsi4_ep>:
    23c6:	66 1f       	adc	r22, r22
    23c8:	77 1f       	adc	r23, r23
    23ca:	88 1f       	adc	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	1a 94       	dec	r1
    23d0:	69 f7       	brne	.-38     	; 0x23ac <__udivmodsi4_loop>
    23d2:	60 95       	com	r22
    23d4:	70 95       	com	r23
    23d6:	80 95       	com	r24
    23d8:	90 95       	com	r25
    23da:	9b 01       	movw	r18, r22
    23dc:	ac 01       	movw	r20, r24
    23de:	bd 01       	movw	r22, r26
    23e0:	cf 01       	movw	r24, r30
    23e2:	08 95       	ret

000023e4 <__prologue_saves__>:
    23e4:	2f 92       	push	r2
    23e6:	3f 92       	push	r3
    23e8:	4f 92       	push	r4
    23ea:	5f 92       	push	r5
    23ec:	6f 92       	push	r6
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	ca 1b       	sub	r28, r26
    240e:	db 0b       	sbc	r29, r27
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	09 94       	ijmp

0000241c <__epilogue_restores__>:
    241c:	2a 88       	ldd	r2, Y+18	; 0x12
    241e:	39 88       	ldd	r3, Y+17	; 0x11
    2420:	48 88       	ldd	r4, Y+16	; 0x10
    2422:	5f 84       	ldd	r5, Y+15	; 0x0f
    2424:	6e 84       	ldd	r6, Y+14	; 0x0e
    2426:	7d 84       	ldd	r7, Y+13	; 0x0d
    2428:	8c 84       	ldd	r8, Y+12	; 0x0c
    242a:	9b 84       	ldd	r9, Y+11	; 0x0b
    242c:	aa 84       	ldd	r10, Y+10	; 0x0a
    242e:	b9 84       	ldd	r11, Y+9	; 0x09
    2430:	c8 84       	ldd	r12, Y+8	; 0x08
    2432:	df 80       	ldd	r13, Y+7	; 0x07
    2434:	ee 80       	ldd	r14, Y+6	; 0x06
    2436:	fd 80       	ldd	r15, Y+5	; 0x05
    2438:	0c 81       	ldd	r16, Y+4	; 0x04
    243a:	1b 81       	ldd	r17, Y+3	; 0x03
    243c:	aa 81       	ldd	r26, Y+2	; 0x02
    243e:	b9 81       	ldd	r27, Y+1	; 0x01
    2440:	ce 0f       	add	r28, r30
    2442:	d1 1d       	adc	r29, r1
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	ed 01       	movw	r28, r26
    2450:	08 95       	ret

00002452 <_exit>:
    2452:	f8 94       	cli

00002454 <__stop_program>:
    2454:	ff cf       	rjmp	.-2      	; 0x2454 <__stop_program>
